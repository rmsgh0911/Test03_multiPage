{"version":3,"file":"vox-parser.js","sources":["../../src/core/tracing.js","../../src/core/debug.js","../../src/core/event-handle.js","../../src/core/event-handler.js","../../src/framework/components/component.js","../../src/core/math/math.js","../../src/core/math/color.js","../../src/core/math/vec2.js","../../src/core/math/vec3.js","../../src/core/math/vec4.js","../../src/framework/components/system.js","vox-parser.mjs"],"sourcesContent":["/**\n * Log tracing functionality, allowing for tracing of the internal functionality of the engine.\n * Note that the trace logging only takes place in the debug build of the engine and is stripped\n * out in other builds.\n *\n * @category Debug\n */\nclass Tracing {\n    /**\n     * Set storing the names of enabled trace channels.\n     *\n     * @type {Set<string>}\n     * @private\n     */\n    static _traceChannels = new Set();\n\n    /**\n     * Enable call stack logging for trace calls. Defaults to false.\n     *\n     * @type {boolean}\n     */\n    static stack = false;\n\n    /**\n     * Enable or disable a trace channel.\n     *\n     * @param {string} channel - Name of the trace channel. Can be:\n     *\n     * - {@link TRACEID_RENDER_FRAME}\n     * - {@link TRACEID_RENDER_FRAME_TIME}\n     * - {@link TRACEID_RENDER_PASS}\n     * - {@link TRACEID_RENDER_PASS_DETAIL}\n     * - {@link TRACEID_RENDER_ACTION}\n     * - {@link TRACEID_RENDER_TARGET_ALLOC}\n     * - {@link TRACEID_TEXTURE_ALLOC}\n     * - {@link TRACEID_SHADER_ALLOC}\n     * - {@link TRACEID_SHADER_COMPILE}\n     * - {@link TRACEID_VRAM_TEXTURE}\n     * - {@link TRACEID_VRAM_VB}\n     * - {@link TRACEID_VRAM_IB}\n     * - {@link TRACEID_RENDERPIPELINE_ALLOC}\n     * - {@link TRACEID_COMPUTEPIPELINE_ALLOC}\n     * - {@link TRACEID_PIPELINELAYOUT_ALLOC}\n     * - {@link TRACEID_TEXTURES}\n     * - {@link TRACEID_GPU_TIMINGS}\n     *\n     * @param {boolean} enabled - New enabled state for the channel.\n     */\n    static set(channel, enabled = true) {\n\n        // #if _DEBUG\n        if (enabled) {\n            Tracing._traceChannels.add(channel);\n        } else {\n            Tracing._traceChannels.delete(channel);\n        }\n        // #endif\n    }\n\n    /**\n     * Test if the trace channel is enabled.\n     *\n     * @param {string} channel - Name of the trace channel.\n     * @returns {boolean} - True if the trace channel is enabled.\n     */\n    static get(channel) {\n        return Tracing._traceChannels.has(channel);\n    }\n}\n\nexport { Tracing };\n","import { Tracing } from \"./tracing.js\";\n\n/**\n * Engine debug log system. Note that the logging only executes in the\n * debug build of the engine, and is stripped out in other builds.\n *\n * @ignore\n */\nclass Debug {\n    /**\n     * Set storing already logged messages, to only print each unique message one time.\n     *\n     * @type {Set<string>}\n     * @private\n     */\n    static _loggedMessages = new Set();\n\n    /**\n     * Deprecated warning message.\n     *\n     * @param {string} message - The message to log.\n     */\n    static deprecated(message) {\n        if (!Debug._loggedMessages.has(message)) {\n            Debug._loggedMessages.add(message);\n            console.warn('DEPRECATED: ' + message);\n        }\n    }\n\n    /**\n     * Assertion deprecated message. If the assertion is false, the deprecated message is written to the log.\n     *\n     * @param {boolean|object} assertion - The assertion to check.\n     * @param {string} message - The message to log.\n     */\n    static assertDeprecated(assertion, message) {\n        if (!assertion) {\n            Debug.deprecated(message);\n        }\n    }\n\n    /**\n     * Assertion error message. If the assertion is false, the error message is written to the log.\n     *\n     * @param {boolean|object} assertion - The assertion to check.\n     * @param {...*} args - The values to be written to the log.\n     */\n    static assert(assertion, ...args) {\n        if (!assertion) {\n            console.error('ASSERT FAILED: ', ...args);\n        }\n    }\n\n    /**\n     * Assertion error message that writes an error message to the log if the object has already\n     * been destroyed. To be used along setDestroyed.\n     *\n     * @param {object} object - The object to check.\n     */\n    static assertDestroyed(object) {\n        if (object?.__alreadyDestroyed) {\n            const message = `[${object.constructor?.name}] with name [${object.name}] has already been destroyed, and cannot be used.`;\n            if (!Debug._loggedMessages.has(message)) {\n                Debug._loggedMessages.add(message);\n                console.error('ASSERT FAILED: ', message, object);\n            }\n        }\n    }\n\n    /**\n     * Executes a function in debug mode only.\n     *\n     * @param {Function} func - Function to call.\n     */\n    static call(func) {\n        func();\n    }\n\n    /**\n     * Info message.\n     *\n     * @param {...*} args - The values to be written to the log.\n     */\n    static log(...args) {\n        console.log(...args);\n    }\n\n    /**\n     * Info message logged no more than once.\n     *\n     * @param {string} message - The message to log.\n     * @param {...*} args - The values to be written to the log.\n     */\n    static logOnce(message, ...args) {\n        if (!Debug._loggedMessages.has(message)) {\n            Debug._loggedMessages.add(message);\n            console.log(message, ...args);\n        }\n    }\n\n    /**\n     * Warning message.\n     *\n     * @param {...*} args - The values to be written to the log.\n     */\n    static warn(...args) {\n        console.warn(...args);\n    }\n\n    /**\n     * Warning message logged no more than once.\n     *\n     * @param {string} message - The message to log.\n     * @param {...*} args - The values to be written to the log.\n     */\n    static warnOnce(message, ...args) {\n        if (!Debug._loggedMessages.has(message)) {\n            Debug._loggedMessages.add(message);\n            console.warn(message, ...args);\n        }\n    }\n\n    /**\n     * Error message.\n     *\n     * @param {...*} args - The values to be written to the log.\n     */\n    static error(...args) {\n        console.error(...args);\n    }\n\n    /**\n     * Error message logged no more than once.\n     *\n     * @param {string} message - The message to log.\n     * @param {...*} args - The values to be written to the log.\n     */\n    static errorOnce(message, ...args) {\n        if (!Debug._loggedMessages.has(message)) {\n            Debug._loggedMessages.add(message);\n            console.error(message, ...args);\n        }\n    }\n\n    /**\n     * Trace message, which is logged to the console if the tracing for the channel is enabled\n     *\n     * @param {string} channel - The trace channel\n     * @param {...*} args - The values to be written to the log.\n     */\n    static trace(channel, ...args) {\n        if (Tracing.get(channel)) {\n            console.groupCollapsed(`${channel.padEnd(20, ' ')}|`, ...args);\n            if (Tracing.stack) {\n                console.trace();\n            }\n            console.groupEnd();\n        }\n    }\n}\n\n/**\n * A helper debug functionality.\n *\n * @ignore\n */\nclass DebugHelper {\n    /**\n     * Set a name to the name property of the object. Executes only in the debug build.\n     *\n     * @param {object} object - The object to assign the name to.\n     * @param {string} name - The name to assign.\n     */\n    static setName(object, name) {\n        if (object) {\n            object.name = name;\n        }\n    }\n\n    /**\n     * Set a label to the label property of the object. Executes only in the debug build.\n     *\n     * @param {object} object - The object to assign the name to.\n     * @param {string} label - The label to assign.\n     */\n    static setLabel(object, label) {\n        if (object) {\n            object.label = label;\n        }\n    }\n\n    /**\n     * Marks object as destroyed. Executes only in the debug build. To be used along assertDestroyed.\n     *\n     * @param {object} object - The object to mark as destroyed.\n     */\n    static setDestroyed(object) {\n        if (object) {\n            object.__alreadyDestroyed = true;\n        }\n    }\n}\n\nexport { Debug, DebugHelper };\n","import { Debug } from '../core/debug.js';\n\n/**\n * Event Handle that is created by {@link EventHandler} and can be used for easier event removal and management.\n * @example\n * const evt = obj.on('test', (a, b) => {\n *     console.log(a + b);\n * });\n * obj.fire('test');\n *\n * evt.off(); // easy way to remove this event\n * obj.fire('test'); // this will not trigger an event\n * @example\n * // store an array of event handles\n * let events = [ ];\n *\n * events.push(objA.on('testA', () => { }));\n * events.push(objB.on('testB', () => { }));\n *\n * // when needed, remove all events\n * events.forEach((evt) => {\n *     evt.off();\n * });\n * events = [ ];\n */\nclass EventHandle {\n    /**\n     * @type {import('./event-handler.js').EventHandler}\n     * @private\n     */\n    handler;\n\n    /**\n     * @type {string}\n     * @private\n     */\n    name;\n\n    /**\n     * @type {import('./event-handler.js').HandleEventCallback}\n     * @ignore\n     */\n    callback;\n\n    /**\n     * @type {object}\n     * @ignore\n     */\n    scope;\n\n    /**\n     * @type {boolean}\n     * @ignore\n     */\n    _once;\n\n    /**\n     * True if event has been removed.\n     * @type {boolean}\n     * @private\n     */\n    _removed = false;\n\n    /**\n     * @param {import('./event-handler.js').EventHandler} handler - source object of the event.\n     * @param {string} name - Name of the event.\n     * @param {import('./event-handler.js').HandleEventCallback} callback - Function that is called when event is fired.\n     * @param {object} scope - Object that is used as `this` when event is fired.\n     * @param {boolean} [once] - If this is a single event and will be removed after event is fired.\n     */\n    constructor(handler, name, callback, scope, once = false) {\n        this.handler = handler;\n        this.name = name;\n        this.callback = callback;\n        this.scope = scope;\n        this._once = once;\n    }\n\n    /**\n     * Remove this event from its handler.\n     */\n    off() {\n        if (this._removed) return;\n        this.handler.off(this.name, this.callback, this.scope);\n    }\n\n    on(name, callback, scope = this) {\n        Debug.deprecated('Using chaining with EventHandler.on is deprecated, subscribe to an event from EventHandler directly instead.');\n        return this.handler._addCallback(name, callback, scope, false);\n    }\n\n    once(name, callback, scope = this) {\n        Debug.deprecated('Using chaining with EventHandler.once is deprecated, subscribe to an event from EventHandler directly instead.');\n        return this.handler._addCallback(name, callback, scope, true);\n    }\n\n    /**\n     * Mark if event has been removed.\n     * @type {boolean}\n     * @internal\n     */\n    set removed(value) {\n        if (!value) return;\n        this._removed = true;\n    }\n\n    /**\n     * True if event has been removed.\n     * @type {boolean}\n     */\n    get removed() {\n        return this._removed;\n    }\n}\n\nexport { EventHandle };\n","import { EventHandle } from './event-handle.js';\n\n/**\n * Callback used by {@link EventHandler} functions. Note the callback is limited to 8 arguments.\n *\n * @callback HandleEventCallback\n * @param {*} [arg1] - First argument that is passed from caller.\n * @param {*} [arg2] - Second argument that is passed from caller.\n * @param {*} [arg3] - Third argument that is passed from caller.\n * @param {*} [arg4] - Fourth argument that is passed from caller.\n * @param {*} [arg5] - Fifth argument that is passed from caller.\n * @param {*} [arg6] - Sixth argument that is passed from caller.\n * @param {*} [arg7] - Seventh argument that is passed from caller.\n * @param {*} [arg8] - Eighth argument that is passed from caller.\n */\n\n/**\n * Abstract base class that implements functionality for event handling.\n *\n * ```javascript\n * const obj = new EventHandlerSubclass();\n *\n * // subscribe to an event\n * obj.on('hello', function (str) {\n *     console.log('event hello is fired', str);\n * });\n *\n * // fire event\n * obj.fire('hello', 'world');\n * ```\n */\nclass EventHandler {\n    /**\n     * @type {Map<string,Array<EventHandle>>}\n     * @private\n     */\n    _callbacks = new Map();\n\n    /**\n     * @type {Map<string,Array<EventHandle>>}\n     * @private\n     */\n    _callbackActive = new Map();\n\n    /**\n     * Reinitialize the event handler.\n     * @ignore\n     */\n    initEventHandler() {\n        this._callbacks = new Map();\n        this._callbackActive = new Map();\n    }\n\n    /**\n     * Registers a new event handler.\n     *\n     * @param {string} name - Name of the event to bind the callback to.\n     * @param {HandleEventCallback} callback - Function that is called when event is fired. Note\n     * the callback is limited to 8 arguments.\n     * @param {object} scope - Object to use as 'this' when the event is fired, defaults to\n     * current this.\n     * @param {boolean} once - If true, the callback will be unbound after being fired once.\n     * @returns {EventHandle} Created {@link EventHandle}.\n     * @ignore\n     */\n    _addCallback(name, callback, scope, once) {\n        // #if _DEBUG\n        if (!name || typeof name !== 'string' || !callback)\n            console.warn(`EventHandler: subscribing to an event (${name}) with missing arguments`, callback);\n        // #endif\n\n        if (!this._callbacks.has(name))\n            this._callbacks.set(name, []);\n\n        // if we are adding a callback to the list that is executing right now\n        // ensure we preserve initial list before modifications\n        if (this._callbackActive.has(name)) {\n            const callbackActive = this._callbackActive.get(name);\n            if (callbackActive && callbackActive === this._callbacks.get(name)) {\n                this._callbackActive.set(name, callbackActive.slice());\n            }\n        }\n\n        const evt = new EventHandle(this, name, callback, scope, once);\n        this._callbacks.get(name).push(evt);\n        return evt;\n    }\n\n    /**\n     * Attach an event handler to an event.\n     *\n     * @param {string} name - Name of the event to bind the callback to.\n     * @param {HandleEventCallback} callback - Function that is called when event is fired. Note\n     * the callback is limited to 8 arguments.\n     * @param {object} [scope] - Object to use as 'this' when the event is fired, defaults to\n     * current this.\n     * @returns {EventHandle} Can be used for removing event in the future.\n     * @example\n     * obj.on('test', function (a, b) {\n     *     console.log(a + b);\n     * });\n     * obj.fire('test', 1, 2); // prints 3 to the console\n     * @example\n     * const evt = obj.on('test', function (a, b) {\n     *     console.log(a + b);\n     * });\n     * // some time later\n     * evt.off();\n     */\n    on(name, callback, scope = this) {\n        return this._addCallback(name, callback, scope, false);\n    }\n\n    /**\n     * Attach an event handler to an event. This handler will be removed after being fired once.\n     *\n     * @param {string} name - Name of the event to bind the callback to.\n     * @param {HandleEventCallback} callback - Function that is called when event is fired. Note\n     * the callback is limited to 8 arguments.\n     * @param {object} [scope] - Object to use as 'this' when the event is fired, defaults to\n     * current this.\n     * @returns {EventHandle} - can be used for removing event in the future.\n     * @example\n     * obj.once('test', function (a, b) {\n     *     console.log(a + b);\n     * });\n     * obj.fire('test', 1, 2); // prints 3 to the console\n     * obj.fire('test', 1, 2); // not going to get handled\n     */\n    once(name, callback, scope = this) {\n        return this._addCallback(name, callback, scope, true);\n    }\n\n    /**\n     * Detach an event handler from an event. If callback is not provided then all callbacks are\n     * unbound from the event, if scope is not provided then all events with the callback will be\n     * unbound.\n     *\n     * @param {string} [name] - Name of the event to unbind.\n     * @param {HandleEventCallback} [callback] - Function to be unbound.\n     * @param {object} [scope] - Scope that was used as the this when the event is fired.\n     * @returns {EventHandler} Self for chaining.\n     * @example\n     * const handler = function () {\n     * };\n     * obj.on('test', handler);\n     *\n     * obj.off(); // Removes all events\n     * obj.off('test'); // Removes all events called 'test'\n     * obj.off('test', handler); // Removes all handler functions, called 'test'\n     * obj.off('test', handler, this); // Removes all handler functions, called 'test' with scope this\n     */\n    off(name, callback, scope) {\n        if (name) {\n            // if we are removing a callback from the list that is executing right now\n            // ensure we preserve initial list before modifications\n            if (this._callbackActive.has(name) && this._callbackActive.get(name) === this._callbacks.get(name))\n                this._callbackActive.set(name, this._callbackActive.get(name).slice());\n        } else {\n            // if we are removing a callback from any list that is executing right now\n            // ensure we preserve these initial lists before modifications\n            for (const [key, callbacks] of this._callbackActive) {\n                if (!this._callbacks.has(key))\n                    continue;\n\n                if (this._callbacks.get(key) !== callbacks)\n                    continue;\n\n                this._callbackActive.set(key, callbacks.slice());\n            }\n        }\n\n        if (!name) {\n            // remove all events\n            for (const callbacks of this._callbacks.values()) {\n                for (let i = 0; i < callbacks.length; i++) {\n                    callbacks[i].removed = true;\n                }\n            }\n            this._callbacks.clear();\n        } else if (!callback) {\n            // remove all events of a specific name\n            const callbacks = this._callbacks.get(name);\n            if (callbacks) {\n                for (let i = 0; i < callbacks.length; i++) {\n                    callbacks[i].removed = true;\n                }\n                this._callbacks.delete(name);\n            }\n        } else {\n            const callbacks = this._callbacks.get(name);\n            if (!callbacks)\n                return this;\n\n            for (let i = 0; i < callbacks.length; i++) {\n                // remove all events with a specific name and a callback\n                if (callbacks[i].callback !== callback)\n                    continue;\n\n                // could be a specific scope as well\n                if (scope && callbacks[i].scope !== scope)\n                    continue;\n\n                callbacks[i].removed = true;\n                callbacks.splice(i, 1);\n                i--;\n            }\n\n            if (callbacks.length === 0)\n                this._callbacks.delete(name);\n        }\n\n        return this;\n    }\n\n    /**\n     * Fire an event, all additional arguments are passed on to the event listener.\n     *\n     * @param {string} name - Name of event to fire.\n     * @param {*} [arg1] - First argument that is passed to the event handler.\n     * @param {*} [arg2] - Second argument that is passed to the event handler.\n     * @param {*} [arg3] - Third argument that is passed to the event handler.\n     * @param {*} [arg4] - Fourth argument that is passed to the event handler.\n     * @param {*} [arg5] - Fifth argument that is passed to the event handler.\n     * @param {*} [arg6] - Sixth argument that is passed to the event handler.\n     * @param {*} [arg7] - Seventh argument that is passed to the event handler.\n     * @param {*} [arg8] - Eighth argument that is passed to the event handler.\n     * @returns {EventHandler} Self for chaining.\n     * @example\n     * obj.fire('test', 'This is the message');\n     */\n    fire(name, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8) {\n        if (!name)\n            return this;\n\n        const callbacksInitial = this._callbacks.get(name);\n        if (!callbacksInitial)\n            return this;\n\n        let callbacks;\n\n        if (!this._callbackActive.has(name)) {\n            // when starting callbacks execution ensure we store a list of initial callbacks\n            this._callbackActive.set(name, callbacksInitial);\n        } else if (this._callbackActive.get(name) !== callbacksInitial) {\n            // if we are trying to execute a callback while there is an active execution right now\n            // and the active list has been already modified,\n            // then we go to an unoptimized path and clone callbacks list to ensure execution consistency\n            callbacks = callbacksInitial.slice();\n        }\n\n        // eslint-disable-next-line no-unmodified-loop-condition\n        for (let i = 0; (callbacks || this._callbackActive.get(name)) && (i < (callbacks || this._callbackActive.get(name)).length); i++) {\n            const evt = (callbacks || this._callbackActive.get(name))[i];\n            if (!evt.callback) continue;\n\n            evt.callback.call(evt.scope, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);\n\n            if (evt._once) {\n                // check that callback still exists because user may have unsubscribed in the event handler\n                const existingCallback = this._callbacks.get(name);\n                const ind = existingCallback ? existingCallback.indexOf(evt) : -1;\n\n                if (ind !== -1) {\n                    if (this._callbackActive.get(name) === existingCallback)\n                        this._callbackActive.set(name, this._callbackActive.get(name).slice());\n\n                    const callbacks = this._callbacks.get(name);\n                    if (!callbacks) continue;\n                    callbacks[ind].removed = true;\n                    callbacks.splice(ind, 1);\n\n                    if (callbacks.length === 0)\n                        this._callbacks.delete(name);\n                }\n            }\n        }\n\n        if (!callbacks)\n            this._callbackActive.delete(name);\n\n        return this;\n    }\n\n    /**\n     * Test if there are any handlers bound to an event name.\n     *\n     * @param {string} name - The name of the event to test.\n     * @returns {boolean} True if the object has handlers bound to the specified event name.\n     * @example\n     * obj.on('test', function () { }); // bind an event to 'test'\n     * obj.hasEvent('test'); // returns true\n     * obj.hasEvent('hello'); // returns false\n     */\n    hasEvent(name) {\n        return !!this._callbacks.get(name)?.length;\n    }\n}\n\nexport { EventHandler };\n","import { EventHandler } from '../../core/event-handler.js';\n\n/**\n * Components are used to attach functionality on a {@link Entity}. Components can receive update\n * events each frame, and expose properties to the PlayCanvas Editor.\n *\n * @property {boolean} enabled Enables or disables the component.\n * @augments EventHandler\n */\nclass Component extends EventHandler {\n    /**\n     * The ComponentSystem used to create this Component.\n     *\n     * @type {import('./system.js').ComponentSystem}\n     */\n    system;\n\n    /**\n     * The Entity that this Component is attached to.\n     *\n     * @type {import('../entity.js').Entity}\n     */\n    entity;\n\n    /**\n     * Base constructor for a Component.\n     *\n     * @param {import('./system.js').ComponentSystem} system - The ComponentSystem used to create\n     * this Component.\n     * @param {import('../entity.js').Entity} entity - The Entity that this Component is attached\n     * to.\n     */\n    constructor(system, entity) {\n        super();\n\n        this.system = system;\n        this.entity = entity;\n\n        if (this.system.schema && !this._accessorsBuilt) {\n            this.buildAccessors(this.system.schema);\n        }\n\n        this.on('set', function (name, oldValue, newValue) {\n            this.fire('set_' + name, name, oldValue, newValue);\n        });\n\n        this.on('set_enabled', this.onSetEnabled, this);\n    }\n\n    /** @ignore */\n    static _buildAccessors(obj, schema) {\n        // Create getter/setter pairs for each property defined in the schema\n        schema.forEach(function (descriptor) {\n            // If the property descriptor is an object, it should have a `name`\n            // member. If not, it should just be the plain property name.\n            const name = (typeof descriptor === 'object') ? descriptor.name : descriptor;\n\n            Object.defineProperty(obj, name, {\n                get: function () {\n                    return this.data[name];\n                },\n                set: function (value) {\n                    const data = this.data;\n                    const oldValue = data[name];\n                    data[name] = value;\n                    this.fire('set', name, oldValue, value);\n                },\n                configurable: true\n            });\n        });\n\n        obj._accessorsBuilt = true;\n    }\n\n    /** @ignore */\n    buildAccessors(schema) {\n        Component._buildAccessors(this, schema);\n    }\n\n    /** @ignore */\n    onSetEnabled(name, oldValue, newValue) {\n        if (oldValue !== newValue) {\n            if (this.entity.enabled) {\n                if (newValue) {\n                    this.onEnable();\n                } else {\n                    this.onDisable();\n                }\n            }\n        }\n    }\n\n    /** @ignore */\n    onEnable() {\n    }\n\n    /** @ignore */\n    onDisable() {\n    }\n\n    /** @ignore */\n    onPostStateChange() {\n    }\n\n    /**\n     * Access the component data directly. Usually you should access the data properties via the\n     * individual properties as modifying this data directly will not fire 'set' events.\n     *\n     * @type {*}\n     * @ignore\n     */\n    get data() {\n        const record = this.system.store[this.entity.getGuid()];\n        return record ? record.data : null;\n    }\n}\n\nexport { Component };\n","/**\n * Math API.\n *\n * @namespace\n * @category Math\n */\nconst math = {\n    /**\n     * Conversion factor between degrees and radians.\n     *\n     * @type {number}\n     */\n    DEG_TO_RAD: Math.PI / 180,\n\n    /**\n     * Conversion factor between degrees and radians.\n     *\n     * @type {number}\n     */\n    RAD_TO_DEG: 180 / Math.PI,\n\n    /**\n     * Clamp a number between min and max inclusive.\n     *\n     * @param {number} value - Number to clamp.\n     * @param {number} min - Min value.\n     * @param {number} max - Max value.\n     * @returns {number} The clamped value.\n     */\n    clamp(value, min, max) {\n        if (value >= max) return max;\n        if (value <= min) return min;\n        return value;\n    },\n\n    /**\n     * Convert an 24 bit integer into an array of 3 bytes.\n     *\n     * @param {number} i - Number holding an integer value.\n     * @returns {number[]} An array of 3 bytes.\n     * @example\n     * // Set bytes to [0x11, 0x22, 0x33]\n     * const bytes = pc.math.intToBytes24(0x112233);\n     */\n    intToBytes24(i) {\n        const r = (i >> 16) & 0xff;\n        const g = (i >> 8) & 0xff;\n        const b = (i) & 0xff;\n\n        return [r, g, b];\n    },\n\n    /**\n     * Convert an 32 bit integer into an array of 4 bytes.\n     *\n     * @param {number} i - Number holding an integer value.\n     * @returns {number[]} An array of 4 bytes.\n     * @example\n     * // Set bytes to [0x11, 0x22, 0x33, 0x44]\n     * const bytes = pc.math.intToBytes32(0x11223344);\n     */\n    intToBytes32(i) {\n        const r = (i >> 24) & 0xff;\n        const g = (i >> 16) & 0xff;\n        const b = (i >> 8) & 0xff;\n        const a = (i) & 0xff;\n\n        return [r, g, b, a];\n    },\n\n    /**\n     * Convert 3 8 bit Numbers into a single unsigned 24 bit Number.\n     *\n     * @param {number} r - A single byte (0-255).\n     * @param {number} g - A single byte (0-255).\n     * @param {number} b - A single byte (0-255).\n     * @returns {number} A single unsigned 24 bit Number.\n     * @example\n     * // Set result1 to 0x112233 from an array of 3 values\n     * const result1 = pc.math.bytesToInt24([0x11, 0x22, 0x33]);\n     *\n     * // Set result2 to 0x112233 from 3 discrete values\n     * const result2 = pc.math.bytesToInt24(0x11, 0x22, 0x33);\n     */\n    bytesToInt24(r, g, b) {\n        if (r.length) {\n            b = r[2];\n            g = r[1];\n            r = r[0];\n        }\n        return ((r << 16) | (g << 8) | b);\n    },\n\n    /**\n     * Convert 4 1-byte Numbers into a single unsigned 32bit Number.\n     *\n     * @param {number} r - A single byte (0-255).\n     * @param {number} g - A single byte (0-255).\n     * @param {number} b - A single byte (0-255).\n     * @param {number} a - A single byte (0-255).\n     * @returns {number} A single unsigned 32bit Number.\n     * @example\n     * // Set result1 to 0x11223344 from an array of 4 values\n     * const result1 = pc.math.bytesToInt32([0x11, 0x22, 0x33, 0x44]);\n     *\n     * // Set result2 to 0x11223344 from 4 discrete values\n     * const result2 = pc.math.bytesToInt32(0x11, 0x22, 0x33, 0x44);\n     */\n    bytesToInt32(r, g, b, a) {\n        if (r.length) {\n            a = r[3];\n            b = r[2];\n            g = r[1];\n            r = r[0];\n        }\n\n        // Why ((r << 24)>>>0)?\n        // << operator uses signed 32 bit numbers, so 128<<24 is negative.\n        // >>> used unsigned so >>>0 converts back to an unsigned.\n        // See https://stackoverflow.com/questions/1908492/unsigned-integer-in-javascript\n        return ((r << 24) | (g << 16) | (b << 8) | a) >>> 0;\n    },\n\n    /**\n     * Calculates the linear interpolation of two numbers.\n     *\n     * @param {number} a - Number to linearly interpolate from.\n     * @param {number} b - Number to linearly interpolate to.\n     * @param {number} alpha - The value controlling the result of interpolation. When alpha is 0,\n     * a is returned. When alpha is 1, b is returned. Between 0 and 1, a linear interpolation\n     * between a and b is returned. alpha is clamped between 0 and 1.\n     * @returns {number} The linear interpolation of two numbers.\n     */\n    lerp(a, b, alpha) {\n        return a + (b - a) * math.clamp(alpha, 0, 1);\n    },\n\n    /**\n     * Calculates the linear interpolation of two angles ensuring that interpolation is correctly\n     * performed across the 360 to 0 degree boundary. Angles are supplied in degrees.\n     *\n     * @param {number} a - Angle (in degrees) to linearly interpolate from.\n     * @param {number} b - Angle (in degrees) to linearly interpolate to.\n     * @param {number} alpha - The value controlling the result of interpolation. When alpha is 0,\n     * a is returned. When alpha is 1, b is returned. Between 0 and 1, a linear interpolation\n     * between a and b is returned. alpha is clamped between 0 and 1.\n     * @returns {number} The linear interpolation of two angles.\n     */\n    lerpAngle(a, b, alpha) {\n        if (b - a > 180) {\n            b -= 360;\n        }\n        if (b - a < -180) {\n            b += 360;\n        }\n        return math.lerp(a, b, math.clamp(alpha, 0, 1));\n    },\n\n    /**\n     * Returns true if argument is a power-of-two and false otherwise.\n     *\n     * @param {number} x - Number to check for power-of-two property.\n     * @returns {boolean} true if power-of-two and false otherwise.\n     */\n    powerOfTwo(x) {\n        return ((x !== 0) && !(x & (x - 1)));\n    },\n\n    /**\n     * Returns the next power of 2 for the specified value.\n     *\n     * @param {number} val - The value for which to calculate the next power of 2.\n     * @returns {number} The next power of 2.\n     */\n    nextPowerOfTwo(val) {\n        val--;\n        val |= (val >> 1);\n        val |= (val >> 2);\n        val |= (val >> 4);\n        val |= (val >> 8);\n        val |= (val >> 16);\n        val++;\n        return val;\n    },\n\n    /**\n     * Returns the nearest (smaller or larger) power of 2 for the specified value.\n     *\n     * @param {number} val - The value for which to calculate the nearest power of 2.\n     * @returns {number} The nearest power of 2.\n     */\n    nearestPowerOfTwo(val) {\n        return Math.pow(2, Math.round(Math.log(val) / Math.log(2)));\n    },\n\n    /**\n     * Return a pseudo-random number between min and max. The number generated is in the range\n     * [min, max), that is inclusive of the minimum but exclusive of the maximum.\n     *\n     * @param {number} min - Lower bound for range.\n     * @param {number} max - Upper bound for range.\n     * @returns {number} Pseudo-random number between the supplied range.\n     */\n    random(min, max) {\n        const diff = max - min;\n        return Math.random() * diff + min;\n    },\n\n    /**\n     * The function interpolates smoothly between two input values based on a third one that should\n     * be between the first two. The returned value is clamped between 0 and 1.\n     *\n     * The slope (i.e. derivative) of the smoothstep function starts at 0 and ends at 0. This makes\n     * it easy to create a sequence of transitions using smoothstep to interpolate each segment\n     * rather than using a more sophisticated or expensive interpolation technique.\n     *\n     * See https://en.wikipedia.org/wiki/Smoothstep for more details.\n     *\n     * @param {number} min - The lower bound of the interpolation range.\n     * @param {number} max - The upper bound of the interpolation range.\n     * @param {number} x - The value to interpolate.\n     * @returns {number} The smoothly interpolated value clamped between zero and one.\n     */\n    smoothstep(min, max, x) {\n        if (x <= min) return 0;\n        if (x >= max) return 1;\n\n        x = (x - min) / (max - min);\n\n        return x * x * (3 - 2 * x);\n    },\n\n    /**\n     * An improved version of the {@link math.smoothstep} function which has zero 1st and 2nd order\n     * derivatives at t=0 and t=1.\n     *\n     * See https://en.wikipedia.org/wiki/Smoothstep#Variations for more details.\n     *\n     * @param {number} min - The lower bound of the interpolation range.\n     * @param {number} max - The upper bound of the interpolation range.\n     * @param {number} x - The value to interpolate.\n     * @returns {number} The smoothly interpolated value clamped between zero and one.\n     */\n    smootherstep(min, max, x) {\n        if (x <= min) return 0;\n        if (x >= max) return 1;\n\n        x = (x - min) / (max - min);\n\n        return x * x * x * (x * (x * 6 - 15) + 10);\n    },\n\n    /**\n     * Rounds a number up to nearest multiple.\n     *\n     * @param {number} numToRound - The number to round up.\n     * @param {number} multiple - The multiple to round up to.\n     * @returns {number} A number rounded up to nearest multiple.\n     */\n    roundUp(numToRound, multiple) {\n        if (multiple === 0)\n            return numToRound;\n        return Math.ceil(numToRound / multiple) * multiple;\n    },\n\n    /**\n     * Checks whether a given number resides between two other given numbers.\n     *\n     * @param {number} num - The number to check the position of.\n     * @param {number} a - The first upper or lower threshold to check between.\n     * @param {number} b - The second upper or lower threshold to check between.\n     * @param {boolean} inclusive - If true, a num param which is equal to a or b will return true.\n     * @returns {boolean} true if between or false otherwise.\n     * @ignore\n     */\n    between(num, a, b, inclusive) {\n        const min = Math.min(a, b);\n        const max = Math.max(a, b);\n        return inclusive ? num >= min && num <= max : num > min && num < max;\n    }\n};\n\nexport { math };\n","import { math } from './math.js';\n\n/**\n * Representation of an RGBA color.\n *\n * @category Math\n */\nclass Color {\n    /**\n     * The red component of the color.\n     *\n     * @type {number}\n     */\n    r;\n\n    /**\n     * The green component of the color.\n     *\n     * @type {number}\n     */\n    g;\n\n    /**\n     * The blue component of the color.\n     *\n     * @type {number}\n     */\n    b;\n\n    /**\n     * The alpha component of the color.\n     *\n     * @type {number}\n     */\n    a;\n\n    /**\n     * Create a new Color object.\n     *\n     * @param {number|number[]} [r] - The value of the red component (0-1). Defaults to 0. If r is\n     * an array of length 3 or 4, the array will be used to populate all components.\n     * @param {number} [g] - The value of the green component (0-1). Defaults to 0.\n     * @param {number} [b] - The value of the blue component (0-1). Defaults to 0.\n     * @param {number} [a] - The value of the alpha component (0-1). Defaults to 1.\n     */\n    constructor(r = 0, g = 0, b = 0, a = 1) {\n        const length = r.length;\n        if (length === 3 || length === 4) {\n            this.r = r[0];\n            this.g = r[1];\n            this.b = r[2];\n            this.a = r[3] !== undefined ? r[3] : 1;\n        } else {\n            this.r = r;\n            this.g = g;\n            this.b = b;\n            this.a = a;\n        }\n    }\n\n    /**\n     * Returns a clone of the specified color.\n     *\n     * @returns {this} A duplicate color object.\n     */\n    clone() {\n        /** @type {this} */\n        const cstr = this.constructor;\n        return new cstr(this.r, this.g, this.b, this.a);\n    }\n\n    /**\n     * Copies the contents of a source color to a destination color.\n     *\n     * @param {Color} rhs - A color to copy to the specified color.\n     * @returns {Color} Self for chaining.\n     * @example\n     * const src = new pc.Color(1, 0, 0, 1);\n     * const dst = new pc.Color();\n     *\n     * dst.copy(src);\n     *\n     * console.log(\"The two colors are \" + (dst.equals(src) ? \"equal\" : \"different\"));\n     */\n    copy(rhs) {\n        this.r = rhs.r;\n        this.g = rhs.g;\n        this.b = rhs.b;\n        this.a = rhs.a;\n\n        return this;\n    }\n\n    /**\n     * Reports whether two colors are equal.\n     *\n     * @param {Color} rhs - The color to compare to the specified color.\n     * @returns {boolean} True if the colors are equal and false otherwise.\n     * @example\n     * const a = new pc.Color(1, 0, 0, 1);\n     * const b = new pc.Color(1, 1, 0, 1);\n     * console.log(\"The two colors are \" + (a.equals(b) ? \"equal\" : \"different\"));\n     */\n    equals(rhs) {\n        return this.r === rhs.r && this.g === rhs.g && this.b === rhs.b && this.a === rhs.a;\n    }\n\n    /**\n     * Assign values to the color components, including alpha.\n     *\n     * @param {number} r - The value for red (0-1).\n     * @param {number} g - The value for blue (0-1).\n     * @param {number} b - The value for green (0-1).\n     * @param {number} [a] - The value for the alpha (0-1), defaults to 1.\n     * @returns {Color} Self for chaining.\n     */\n    set(r, g, b, a = 1) {\n        this.r = r;\n        this.g = g;\n        this.b = b;\n        this.a = a;\n\n        return this;\n    }\n\n    /**\n     * Returns the result of a linear interpolation between two specified colors.\n     *\n     * @param {Color} lhs - The color to interpolate from.\n     * @param {Color} rhs - The color to interpolate to.\n     * @param {number} alpha - The value controlling the point of interpolation. Between 0 and 1,\n     * the linear interpolant will occur on a straight line between lhs and rhs. Outside of this\n     * range, the linear interpolant will occur on a ray extrapolated from this line.\n     * @returns {Color} Self for chaining.\n     * @example\n     * const a = new pc.Color(0, 0, 0);\n     * const b = new pc.Color(1, 1, 0.5);\n     * const r = new pc.Color();\n     *\n     * r.lerp(a, b, 0);   // r is equal to a\n     * r.lerp(a, b, 0.5); // r is 0.5, 0.5, 0.25\n     * r.lerp(a, b, 1);   // r is equal to b\n     */\n    lerp(lhs, rhs, alpha) {\n        this.r = lhs.r + alpha * (rhs.r - lhs.r);\n        this.g = lhs.g + alpha * (rhs.g - lhs.g);\n        this.b = lhs.b + alpha * (rhs.b - lhs.b);\n        this.a = lhs.a + alpha * (rhs.a - lhs.a);\n\n        return this;\n    }\n\n    /**\n     * Set the values of the color from a string representation '#11223344' or '#112233'.\n     *\n     * @param {string} hex - A string representation in the format '#RRGGBBAA' or '#RRGGBB'. Where\n     * RR, GG, BB, AA are red, green, blue and alpha values. This is the same format used in\n     * HTML/CSS.\n     * @returns {Color} Self for chaining.\n     */\n    fromString(hex) {\n        const i = parseInt(hex.replace('#', '0x'), 16);\n        let bytes;\n        if (hex.length > 7) {\n            bytes = math.intToBytes32(i);\n        } else {\n            bytes = math.intToBytes24(i);\n            bytes[3] = 255;\n        }\n\n        this.set(bytes[0] / 255, bytes[1] / 255, bytes[2] / 255, bytes[3] / 255);\n\n        return this;\n    }\n\n    /**\n     * Converts the color to string form. The format is '#RRGGBBAA', where RR, GG, BB, AA are the\n     * red, green, blue and alpha values. When the alpha value is not included (the default), this\n     * is the same format as used in HTML/CSS.\n     *\n     * @param {boolean} alpha - If true, the output string will include the alpha value.\n     * @returns {string} The color in string form.\n     * @example\n     * const c = new pc.Color(1, 1, 1);\n     * // Outputs #ffffffff\n     * console.log(c.toString());\n     */\n    toString(alpha) {\n        let s = '#' + ((1 << 24) + (Math.round(this.r * 255) << 16) + (Math.round(this.g * 255) << 8) + Math.round(this.b * 255)).toString(16).slice(1);\n        if (alpha === true) {\n            const a = Math.round(this.a * 255).toString(16);\n            if (this.a < 16 / 255) {\n                s += '0' + a;\n            } else {\n                s += a;\n            }\n\n        }\n\n        return s;\n    }\n\n    /**\n     * A constant color set to black [0, 0, 0, 1].\n     *\n     * @type {Color}\n     * @readonly\n     */\n    static BLACK = Object.freeze(new Color(0, 0, 0, 1));\n\n    /**\n     * A constant color set to blue [0, 0, 1, 1].\n     *\n     * @type {Color}\n     * @readonly\n     */\n    static BLUE = Object.freeze(new Color(0, 0, 1, 1));\n\n    /**\n     * A constant color set to cyan [0, 1, 1, 1].\n     *\n     * @type {Color}\n     * @readonly\n     */\n    static CYAN = Object.freeze(new Color(0, 1, 1, 1));\n\n    /**\n     * A constant color set to gray [0.5, 0.5, 0.5, 1].\n     *\n     * @type {Color}\n     * @readonly\n     */\n    static GRAY = Object.freeze(new Color(0.5, 0.5, 0.5, 1));\n\n    /**\n     * A constant color set to green [0, 1, 0, 1].\n     *\n     * @type {Color}\n     * @readonly\n     */\n    static GREEN = Object.freeze(new Color(0, 1, 0, 1));\n\n    /**\n     * A constant color set to magenta [1, 0, 1, 1].\n     *\n     * @type {Color}\n     * @readonly\n     */\n    static MAGENTA = Object.freeze(new Color(1, 0, 1, 1));\n\n    /**\n     * A constant color set to red [1, 0, 0, 1].\n     *\n     * @type {Color}\n     * @readonly\n     */\n    static RED = Object.freeze(new Color(1, 0, 0, 1));\n\n    /**\n     * A constant color set to white [1, 1, 1, 1].\n     *\n     * @type {Color}\n     * @readonly\n     */\n    static WHITE = Object.freeze(new Color(1, 1, 1, 1));\n\n    /**\n     * A constant color set to yellow [1, 1, 0, 1].\n     *\n     * @type {Color}\n     * @readonly\n     */\n    static YELLOW = Object.freeze(new Color(1, 1, 0, 1));\n}\n\nexport { Color };\n","import { math } from './math.js';\n\n/**\n * A 2-dimensional vector.\n *\n * @category Math\n */\nclass Vec2 {\n    /**\n     * The first component of the vector.\n     *\n     * @type {number}\n     */\n    x;\n\n    /**\n     * The second component of the vector.\n     *\n     * @type {number}\n     */\n    y;\n\n    /**\n     * Create a new Vec2 instance.\n     *\n     * @param {number|number[]} [x] - The x value. Defaults to 0. If x is an array of length 2, the\n     * array will be used to populate all components.\n     * @param {number} [y] - The y value. Defaults to 0.\n     * @example\n     * const v = new pc.Vec2(1, 2);\n     */\n    constructor(x = 0, y = 0) {\n        if (x.length === 2) {\n            this.x = x[0];\n            this.y = x[1];\n        } else {\n            this.x = x;\n            this.y = y;\n        }\n    }\n\n    /**\n     * Adds a 2-dimensional vector to another in place.\n     *\n     * @param {Vec2} rhs - The vector to add to the specified vector.\n     * @returns {Vec2} Self for chaining.\n     * @example\n     * const a = new pc.Vec2(10, 10);\n     * const b = new pc.Vec2(20, 20);\n     *\n     * a.add(b);\n     *\n     * // Outputs [30, 30]\n     * console.log(\"The result of the addition is: \" + a.toString());\n     */\n    add(rhs) {\n        this.x += rhs.x;\n        this.y += rhs.y;\n\n        return this;\n    }\n\n    /**\n     * Adds two 2-dimensional vectors together and returns the result.\n     *\n     * @param {Vec2} lhs - The first vector operand for the addition.\n     * @param {Vec2} rhs - The second vector operand for the addition.\n     * @returns {Vec2} Self for chaining.\n     * @example\n     * const a = new pc.Vec2(10, 10);\n     * const b = new pc.Vec2(20, 20);\n     * const r = new pc.Vec2();\n     *\n     * r.add2(a, b);\n     * // Outputs [30, 30]\n     *\n     * console.log(\"The result of the addition is: \" + r.toString());\n     */\n    add2(lhs, rhs) {\n        this.x = lhs.x + rhs.x;\n        this.y = lhs.y + rhs.y;\n\n        return this;\n    }\n\n    /**\n     * Adds a number to each element of a vector.\n     *\n     * @param {number} scalar - The number to add.\n     * @returns {Vec2} Self for chaining.\n     * @example\n     * const vec = new pc.Vec2(3, 4);\n     *\n     * vec.addScalar(2);\n     *\n     * // Outputs [5, 6]\n     * console.log(\"The result of the addition is: \" + vec.toString());\n     */\n    addScalar(scalar) {\n        this.x += scalar;\n        this.y += scalar;\n\n        return this;\n    }\n\n    /**\n     * Adds a 2-dimensional vector scaled by scalar value. Does not modify the vector being added.\n     *\n     * @param {Vec2} rhs - The vector to add to the specified vector.\n     * @param {number} scalar - The number to multiply the added vector with.\n     * @returns {Vec2} Self for chaining.\n     * @example\n     * const vec = new pc.Vec2(1, 2);\n     *\n     * vec.addScaled(pc.Vec2.UP, 2);\n     *\n     * // Outputs [1, 4]\n     * console.log(\"The result of the addition is: \" + vec.toString());\n     */\n    addScaled(rhs, scalar) {\n        this.x += rhs.x * scalar;\n        this.y += rhs.y * scalar;\n\n        return this;\n    }\n\n    /**\n     * Returns an identical copy of the specified 2-dimensional vector.\n     *\n     * @returns {this} A 2-dimensional vector containing the result of the cloning.\n     * @example\n     * const v = new pc.Vec2(10, 20);\n     * const vclone = v.clone();\n     * console.log(\"The result of the cloning is: \" + vclone.toString());\n     */\n    clone() {\n        /** @type {this} */\n        const cstr = this.constructor;\n        return new cstr(this.x, this.y);\n    }\n\n    /**\n     * Copies the contents of a source 2-dimensional vector to a destination 2-dimensional vector.\n     *\n     * @param {Vec2} rhs - A vector to copy to the specified vector.\n     * @returns {Vec2} Self for chaining.\n     * @example\n     * const src = new pc.Vec2(10, 20);\n     * const dst = new pc.Vec2();\n     *\n     * dst.copy(src);\n     *\n     * console.log(\"The two vectors are \" + (dst.equals(src) ? \"equal\" : \"different\"));\n     */\n    copy(rhs) {\n        this.x = rhs.x;\n        this.y = rhs.y;\n\n        return this;\n    }\n\n    /**\n     * Returns the result of a cross product operation performed on the two specified 2-dimensional\n     * vectors.\n     *\n     * @param {Vec2} rhs - The second 2-dimensional vector operand of the cross product.\n     * @returns {number} The cross product of the two vectors.\n     * @example\n     * const right = new pc.Vec2(1, 0);\n     * const up = new pc.Vec2(0, 1);\n     * const crossProduct = right.cross(up);\n     *\n     * // Prints 1\n     * console.log(\"The result of the cross product is: \" + crossProduct);\n     */\n    cross(rhs) {\n        return this.x * rhs.y - this.y * rhs.x;\n    }\n\n    /**\n     * Returns the distance between the two specified 2-dimensional vectors.\n     *\n     * @param {Vec2} rhs - The second 2-dimensional vector to test.\n     * @returns {number} The distance between the two vectors.\n     * @example\n     * const v1 = new pc.Vec2(5, 10);\n     * const v2 = new pc.Vec2(10, 20);\n     * const d = v1.distance(v2);\n     * console.log(\"The distance between v1 and v2 is: \" + d);\n     */\n    distance(rhs) {\n        const x = this.x - rhs.x;\n        const y = this.y - rhs.y;\n        return Math.sqrt(x * x + y * y);\n    }\n\n    /**\n     * Divides a 2-dimensional vector by another in place.\n     *\n     * @param {Vec2} rhs - The vector to divide the specified vector by.\n     * @returns {Vec2} Self for chaining.\n     * @example\n     * const a = new pc.Vec2(4, 9);\n     * const b = new pc.Vec2(2, 3);\n     *\n     * a.div(b);\n     *\n     * // Outputs [2, 3]\n     * console.log(\"The result of the division is: \" + a.toString());\n     */\n    div(rhs) {\n        this.x /= rhs.x;\n        this.y /= rhs.y;\n\n        return this;\n    }\n\n    /**\n     * Divides one 2-dimensional vector by another and writes the result to the specified vector.\n     *\n     * @param {Vec2} lhs - The dividend vector (the vector being divided).\n     * @param {Vec2} rhs - The divisor vector (the vector dividing the dividend).\n     * @returns {Vec2} Self for chaining.\n     * @example\n     * const a = new pc.Vec2(4, 9);\n     * const b = new pc.Vec2(2, 3);\n     * const r = new pc.Vec2();\n     *\n     * r.div2(a, b);\n     * // Outputs [2, 3]\n     *\n     * console.log(\"The result of the division is: \" + r.toString());\n     */\n    div2(lhs, rhs) {\n        this.x = lhs.x / rhs.x;\n        this.y = lhs.y / rhs.y;\n\n        return this;\n    }\n\n    /**\n     * Divides each element of a vector by a number.\n     *\n     * @param {number} scalar - The number to divide by.\n     * @returns {Vec2} Self for chaining.\n     * @example\n     * const vec = new pc.Vec2(3, 6);\n     *\n     * vec.divScalar(3);\n     *\n     * // Outputs [1, 2]\n     * console.log(\"The result of the division is: \" + vec.toString());\n     */\n    divScalar(scalar) {\n        this.x /= scalar;\n        this.y /= scalar;\n\n        return this;\n    }\n\n    /**\n     * Returns the result of a dot product operation performed on the two specified 2-dimensional\n     * vectors.\n     *\n     * @param {Vec2} rhs - The second 2-dimensional vector operand of the dot product.\n     * @returns {number} The result of the dot product operation.\n     * @example\n     * const v1 = new pc.Vec2(5, 10);\n     * const v2 = new pc.Vec2(10, 20);\n     * const v1dotv2 = v1.dot(v2);\n     * console.log(\"The result of the dot product is: \" + v1dotv2);\n     */\n    dot(rhs) {\n        return this.x * rhs.x + this.y * rhs.y;\n    }\n\n    /**\n     * Reports whether two vectors are equal.\n     *\n     * @param {Vec2} rhs - The vector to compare to the specified vector.\n     * @returns {boolean} True if the vectors are equal and false otherwise.\n     * @example\n     * const a = new pc.Vec2(1, 2);\n     * const b = new pc.Vec2(4, 5);\n     * console.log(\"The two vectors are \" + (a.equals(b) ? \"equal\" : \"different\"));\n     */\n    equals(rhs) {\n        return this.x === rhs.x && this.y === rhs.y;\n    }\n\n    /**\n     * Reports whether two vectors are equal using an absolute error tolerance.\n     *\n     * @param {Vec2} rhs - The vector to be compared against.\n     * @param {number} [epsilon] - The maximum difference between each component of the two\n     * vectors. Defaults to 1e-6.\n     * @returns {boolean} True if the vectors are equal and false otherwise.\n     * @example\n     * const a = new pc.Vec2();\n     * const b = new pc.Vec2();\n     * console.log(\"The two vectors are approximately \" + (a.equalsApprox(b, 1e-9) ? \"equal\" : \"different\"));\n     */\n    equalsApprox(rhs, epsilon = 1e-6) {\n        return (Math.abs(this.x - rhs.x) < epsilon) &&\n            (Math.abs(this.y - rhs.y) < epsilon);\n    }\n\n    /**\n     * Returns the magnitude of the specified 2-dimensional vector.\n     *\n     * @returns {number} The magnitude of the specified 2-dimensional vector.\n     * @example\n     * const vec = new pc.Vec2(3, 4);\n     * const len = vec.length();\n     * // Outputs 5\n     * console.log(\"The length of the vector is: \" + len);\n     */\n    length() {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n    }\n\n    /**\n     * Returns the magnitude squared of the specified 2-dimensional vector.\n     *\n     * @returns {number} The magnitude of the specified 2-dimensional vector.\n     * @example\n     * const vec = new pc.Vec2(3, 4);\n     * const len = vec.lengthSq();\n     * // Outputs 25\n     * console.log(\"The length squared of the vector is: \" + len);\n     */\n    lengthSq() {\n        return this.x * this.x + this.y * this.y;\n    }\n\n    /**\n     * Returns the result of a linear interpolation between two specified 2-dimensional vectors.\n     *\n     * @param {Vec2} lhs - The 2-dimensional to interpolate from.\n     * @param {Vec2} rhs - The 2-dimensional to interpolate to.\n     * @param {number} alpha - The value controlling the point of interpolation. Between 0 and 1,\n     * the linear interpolant will occur on a straight line between lhs and rhs. Outside of this\n     * range, the linear interpolant will occur on a ray extrapolated from this line.\n     * @returns {Vec2} Self for chaining.\n     * @example\n     * const a = new pc.Vec2(0, 0);\n     * const b = new pc.Vec2(10, 10);\n     * const r = new pc.Vec2();\n     *\n     * r.lerp(a, b, 0);   // r is equal to a\n     * r.lerp(a, b, 0.5); // r is 5, 5\n     * r.lerp(a, b, 1);   // r is equal to b\n     */\n    lerp(lhs, rhs, alpha) {\n        this.x = lhs.x + alpha * (rhs.x - lhs.x);\n        this.y = lhs.y + alpha * (rhs.y - lhs.y);\n\n        return this;\n    }\n\n    /**\n     * Multiplies a 2-dimensional vector to another in place.\n     *\n     * @param {Vec2} rhs - The 2-dimensional vector used as the second multiplicand of the operation.\n     * @returns {Vec2} Self for chaining.\n     * @example\n     * const a = new pc.Vec2(2, 3);\n     * const b = new pc.Vec2(4, 5);\n     *\n     * a.mul(b);\n     *\n     * // Outputs 8, 15\n     * console.log(\"The result of the multiplication is: \" + a.toString());\n     */\n    mul(rhs) {\n        this.x *= rhs.x;\n        this.y *= rhs.y;\n\n        return this;\n    }\n\n    /**\n     * Returns the result of multiplying the specified 2-dimensional vectors together.\n     *\n     * @param {Vec2} lhs - The 2-dimensional vector used as the first multiplicand of the operation.\n     * @param {Vec2} rhs - The 2-dimensional vector used as the second multiplicand of the operation.\n     * @returns {Vec2} Self for chaining.\n     * @example\n     * const a = new pc.Vec2(2, 3);\n     * const b = new pc.Vec2(4, 5);\n     * const r = new pc.Vec2();\n     *\n     * r.mul2(a, b);\n     *\n     * // Outputs 8, 15\n     * console.log(\"The result of the multiplication is: \" + r.toString());\n     */\n    mul2(lhs, rhs) {\n        this.x = lhs.x * rhs.x;\n        this.y = lhs.y * rhs.y;\n\n        return this;\n    }\n\n    /**\n     * Multiplies each element of a vector by a number.\n     *\n     * @param {number} scalar - The number to multiply by.\n     * @returns {Vec2} Self for chaining.\n     * @example\n     * const vec = new pc.Vec2(3, 6);\n     *\n     * vec.mulScalar(3);\n     *\n     * // Outputs [9, 18]\n     * console.log(\"The result of the multiplication is: \" + vec.toString());\n     */\n    mulScalar(scalar) {\n        this.x *= scalar;\n        this.y *= scalar;\n\n        return this;\n    }\n\n    /**\n     * Returns this 2-dimensional vector converted to a unit vector in place. If the vector has a\n     * length of zero, the vector's elements will be set to zero.\n     *\n     * @param {Vec2} [src] - The vector to normalize. If not set, the operation is done in place.\n     * @returns {Vec2} Self for chaining.\n     * @example\n     * const v = new pc.Vec2(25, 0);\n     *\n     * v.normalize();\n     *\n     * // Outputs 1, 0\n     * console.log(\"The result of the vector normalization is: \" + v.toString());\n     */\n    normalize(src = this) {\n        const lengthSq = src.x * src.x + src.y * src.y;\n        if (lengthSq > 0) {\n            const invLength = 1 / Math.sqrt(lengthSq);\n            this.x = src.x * invLength;\n            this.y = src.y * invLength;\n        }\n\n        return this;\n    }\n\n    /**\n     * Rotate a vector by an angle in degrees.\n     *\n     * @param {number} degrees - The number to degrees to rotate the vector by.\n     * @returns {Vec2} Self for chaining.\n     * @example\n     * const v = new pc.Vec2(0, 10);\n     *\n     * v.rotate(45); // rotates by 45 degrees\n     *\n     * // Outputs [7.071068.., 7.071068..]\n     * console.log(\"Vector after rotation is: \" + v.toString());\n     */\n    rotate(degrees) {\n        const angle = Math.atan2(this.x, this.y) + (degrees * math.DEG_TO_RAD);\n        const len = Math.sqrt(this.x * this.x + this.y * this.y);\n        this.x = Math.sin(angle) * len;\n        this.y = Math.cos(angle) * len;\n        return this;\n    }\n\n    /**\n     * Returns the angle in degrees of the specified 2-dimensional vector.\n     *\n     * @returns {number} The angle in degrees of the specified 2-dimensional vector.\n     * @example\n     * const v = new pc.Vec2(6, 0);\n     * const angle = v.angle();\n     * // Outputs 90..\n     * console.log(\"The angle of the vector is: \" + angle);\n     */\n    angle() {\n        return Math.atan2(this.x, this.y) * math.RAD_TO_DEG;\n    }\n\n    /**\n     * Returns the shortest Euler angle between two 2-dimensional vectors.\n     *\n     * @param {Vec2} rhs - The 2-dimensional vector to calculate angle to.\n     * @returns {number} The shortest angle in degrees between two 2-dimensional vectors.\n     * @example\n     * const a = new pc.Vec2(0, 10); // up\n     * const b = new pc.Vec2(1, -1); // down-right\n     * const angle = a.angleTo(b);\n     * // Outputs 135..\n     * console.log(\"The angle between vectors a and b: \" + angle);\n     */\n    angleTo(rhs) {\n        return Math.atan2(this.x * rhs.y + this.y * rhs.x, this.x * rhs.x + this.y * rhs.y) * math.RAD_TO_DEG;\n    }\n\n    /**\n     * Each element is set to the largest integer less than or equal to its value.\n     *\n     * @param {Vec2} [src] - The vector to floor. If not set, the operation is done in place.\n     * @returns {Vec2} Self for chaining.\n     */\n    floor(src = this) {\n        this.x = Math.floor(src.x);\n        this.y = Math.floor(src.y);\n        return this;\n    }\n\n    /**\n     * Each element is rounded up to the next largest integer.\n     *\n     * @param {Vec2} [src] - The vector to ceil. If not set, the operation is done in place.\n     * @returns {Vec2} Self for chaining.\n     */\n    ceil(src = this) {\n        this.x = Math.ceil(src.x);\n        this.y = Math.ceil(src.y);\n        return this;\n    }\n\n    /**\n     * Each element is rounded up or down to the nearest integer.\n     *\n     * @param {Vec2} [src] - The vector to round. If not set, the operation is done in place.\n     * @returns {Vec2} Self for chaining.\n     */\n    round(src = this) {\n        this.x = Math.round(src.x);\n        this.y = Math.round(src.y);\n        return this;\n    }\n\n    /**\n     * Each element is assigned a value from rhs parameter if it is smaller.\n     *\n     * @param {Vec2} rhs - The 2-dimensional vector used as the source of elements to compare to.\n     * @returns {Vec2} Self for chaining.\n     */\n    min(rhs) {\n        if (rhs.x < this.x) this.x = rhs.x;\n        if (rhs.y < this.y) this.y = rhs.y;\n        return this;\n    }\n\n    /**\n     * Each element is assigned a value from rhs parameter if it is larger.\n     *\n     * @param {Vec2} rhs - The 2-dimensional vector used as the source of elements to compare to.\n     * @returns {Vec2} Self for chaining.\n     */\n    max(rhs) {\n        if (rhs.x > this.x) this.x = rhs.x;\n        if (rhs.y > this.y) this.y = rhs.y;\n        return this;\n    }\n\n    /**\n     * Sets the specified 2-dimensional vector to the supplied numerical values.\n     *\n     * @param {number} x - The value to set on the first component of the vector.\n     * @param {number} y - The value to set on the second component of the vector.\n     * @returns {Vec2} Self for chaining.\n     * @example\n     * const v = new pc.Vec2();\n     * v.set(5, 10);\n     *\n     * // Outputs 5, 10\n     * console.log(\"The result of the vector set is: \" + v.toString());\n     */\n    set(x, y) {\n        this.x = x;\n        this.y = y;\n\n        return this;\n    }\n\n    /**\n     * Subtracts a 2-dimensional vector from another in place.\n     *\n     * @param {Vec2} rhs - The vector to subtract from the specified vector.\n     * @returns {Vec2} Self for chaining.\n     * @example\n     * const a = new pc.Vec2(10, 10);\n     * const b = new pc.Vec2(20, 20);\n     *\n     * a.sub(b);\n     *\n     * // Outputs [-10, -10]\n     * console.log(\"The result of the subtraction is: \" + a.toString());\n     */\n    sub(rhs) {\n        this.x -= rhs.x;\n        this.y -= rhs.y;\n\n        return this;\n    }\n\n    /**\n     * Subtracts two 2-dimensional vectors from one another and returns the result.\n     *\n     * @param {Vec2} lhs - The first vector operand for the subtraction.\n     * @param {Vec2} rhs - The second vector operand for the subtraction.\n     * @returns {Vec2} Self for chaining.\n     * @example\n     * const a = new pc.Vec2(10, 10);\n     * const b = new pc.Vec2(20, 20);\n     * const r = new pc.Vec2();\n     *\n     * r.sub2(a, b);\n     *\n     * // Outputs [-10, -10]\n     * console.log(\"The result of the subtraction is: \" + r.toString());\n     */\n    sub2(lhs, rhs) {\n        this.x = lhs.x - rhs.x;\n        this.y = lhs.y - rhs.y;\n\n        return this;\n    }\n\n    /**\n     * Subtracts a number from each element of a vector.\n     *\n     * @param {number} scalar - The number to subtract.\n     * @returns {Vec2} Self for chaining.\n     * @example\n     * const vec = new pc.Vec2(3, 4);\n     *\n     * vec.subScalar(2);\n     *\n     * // Outputs [1, 2]\n     * console.log(\"The result of the subtraction is: \" + vec.toString());\n     */\n    subScalar(scalar) {\n        this.x -= scalar;\n        this.y -= scalar;\n\n        return this;\n    }\n\n    /**\n     * Converts the vector to string form.\n     *\n     * @returns {string} The vector in string form.\n     * @example\n     * const v = new pc.Vec2(20, 10);\n     * // Outputs [20, 10]\n     * console.log(v.toString());\n     */\n    toString() {\n        return `[${this.x}, ${this.y}]`;\n    }\n\n    /**\n     * Calculates the angle between two Vec2's in radians.\n     *\n     * @param {Vec2} lhs - The first vector operand for the calculation.\n     * @param {Vec2} rhs - The second vector operand for the calculation.\n     * @returns {number} The calculated angle in radians.\n     * @ignore\n     */\n    static angleRad(lhs, rhs) {\n        return Math.atan2(lhs.x * rhs.y - lhs.y * rhs.x, lhs.x * rhs.x + lhs.y * rhs.y);\n    }\n\n    /**\n     * A constant vector set to [0, 0].\n     *\n     * @type {Vec2}\n     * @readonly\n     */\n    static ZERO = Object.freeze(new Vec2(0, 0));\n\n    /**\n     * A constant vector set to [1, 1].\n     *\n     * @type {Vec2}\n     * @readonly\n     */\n    static ONE = Object.freeze(new Vec2(1, 1));\n\n    /**\n     * A constant vector set to [0, 1].\n     *\n     * @type {Vec2}\n     * @readonly\n     */\n    static UP = Object.freeze(new Vec2(0, 1));\n\n    /**\n     * A constant vector set to [0, -1].\n     *\n     * @type {Vec2}\n     * @readonly\n     */\n    static DOWN = Object.freeze(new Vec2(0, -1));\n\n    /**\n     * A constant vector set to [1, 0].\n     *\n     * @type {Vec2}\n     * @readonly\n     */\n    static RIGHT = Object.freeze(new Vec2(1, 0));\n\n    /**\n     * A constant vector set to [-1, 0].\n     *\n     * @type {Vec2}\n     * @readonly\n     */\n    static LEFT = Object.freeze(new Vec2(-1, 0));\n}\n\nexport { Vec2 };\n","/**\n * 3-dimensional vector.\n *\n * @category Math\n */\nclass Vec3 {\n    /**\n     * The first component of the vector.\n     *\n     * @type {number}\n     */\n    x;\n\n    /**\n     * The second component of the vector.\n     *\n     * @type {number}\n     */\n    y;\n\n    /**\n     * The third component of the vector.\n     *\n     * @type {number}\n     */\n    z;\n\n    /**\n     * Creates a new Vec3 object.\n     *\n     * @param {number|number[]} [x] - The x value. Defaults to 0. If x is an array of length 3, the\n     * array will be used to populate all components.\n     * @param {number} [y] - The y value. Defaults to 0.\n     * @param {number} [z] - The z value. Defaults to 0.\n     * @example\n     * const v = new pc.Vec3(1, 2, 3);\n     */\n    constructor(x = 0, y = 0, z = 0) {\n        if (x.length === 3) {\n            this.x = x[0];\n            this.y = x[1];\n            this.z = x[2];\n        } else {\n            this.x = x;\n            this.y = y;\n            this.z = z;\n        }\n    }\n\n    /**\n     * Adds a 3-dimensional vector to another in place.\n     *\n     * @param {Vec3} rhs - The vector to add to the specified vector.\n     * @returns {Vec3} Self for chaining.\n     * @example\n     * const a = new pc.Vec3(10, 10, 10);\n     * const b = new pc.Vec3(20, 20, 20);\n     *\n     * a.add(b);\n     *\n     * // Outputs [30, 30, 30]\n     * console.log(\"The result of the addition is: \" + a.toString());\n     */\n    add(rhs) {\n        this.x += rhs.x;\n        this.y += rhs.y;\n        this.z += rhs.z;\n\n        return this;\n    }\n\n    /**\n     * Adds two 3-dimensional vectors together and returns the result.\n     *\n     * @param {Vec3} lhs - The first vector operand for the addition.\n     * @param {Vec3} rhs - The second vector operand for the addition.\n     * @returns {Vec3} Self for chaining.\n     * @example\n     * const a = new pc.Vec3(10, 10, 10);\n     * const b = new pc.Vec3(20, 20, 20);\n     * const r = new pc.Vec3();\n     *\n     * r.add2(a, b);\n     * // Outputs [30, 30, 30]\n     *\n     * console.log(\"The result of the addition is: \" + r.toString());\n     */\n    add2(lhs, rhs) {\n        this.x = lhs.x + rhs.x;\n        this.y = lhs.y + rhs.y;\n        this.z = lhs.z + rhs.z;\n\n        return this;\n    }\n\n    /**\n     * Adds a number to each element of a vector.\n     *\n     * @param {number} scalar - The number to add.\n     * @returns {Vec3} Self for chaining.\n     * @example\n     * const vec = new pc.Vec3(3, 4, 5);\n     *\n     * vec.addScalar(2);\n     *\n     * // Outputs [5, 6, 7]\n     * console.log(\"The result of the addition is: \" + vec.toString());\n     */\n    addScalar(scalar) {\n        this.x += scalar;\n        this.y += scalar;\n        this.z += scalar;\n\n        return this;\n    }\n\n    /**\n     * Adds a 3-dimensional vector scaled by scalar value. Does not modify the vector being added.\n     *\n     * @param {Vec3} rhs - The vector to add to the specified vector.\n     * @param {number} scalar - The number to multiply the added vector with.\n     * @returns {Vec3} Self for chaining.\n     * @example\n     * const vec = new pc.Vec3(1, 2, 3);\n     *\n     * vec.addScaled(pc.Vec3.UP, 2);\n     *\n     * // Outputs [1, 4, 3]\n     * console.log(\"The result of the addition is: \" + vec.toString());\n     */\n    addScaled(rhs, scalar) {\n        this.x += rhs.x * scalar;\n        this.y += rhs.y * scalar;\n        this.z += rhs.z * scalar;\n\n        return this;\n    }\n\n    /**\n     * Returns an identical copy of the specified 3-dimensional vector.\n     *\n     * @returns {this} A 3-dimensional vector containing the result of the cloning.\n     * @example\n     * const v = new pc.Vec3(10, 20, 30);\n     * const vclone = v.clone();\n     * console.log(\"The result of the cloning is: \" + vclone.toString());\n     */\n    clone() {\n        /** @type {this} */\n        const cstr = this.constructor;\n        return new cstr(this.x, this.y, this.z);\n    }\n\n    /**\n     * Copies the contents of a source 3-dimensional vector to a destination 3-dimensional vector.\n     *\n     * @param {Vec3} rhs - A vector to copy to the specified vector.\n     * @returns {Vec3} Self for chaining.\n     * @example\n     * const src = new pc.Vec3(10, 20, 30);\n     * const dst = new pc.Vec3();\n     *\n     * dst.copy(src);\n     *\n     * console.log(\"The two vectors are \" + (dst.equals(src) ? \"equal\" : \"different\"));\n     */\n    copy(rhs) {\n        this.x = rhs.x;\n        this.y = rhs.y;\n        this.z = rhs.z;\n\n        return this;\n    }\n\n    /**\n     * Returns the result of a cross product operation performed on the two specified 3-dimensional\n     * vectors.\n     *\n     * @param {Vec3} lhs - The first 3-dimensional vector operand of the cross product.\n     * @param {Vec3} rhs - The second 3-dimensional vector operand of the cross product.\n     * @returns {Vec3} Self for chaining.\n     * @example\n     * const back = new pc.Vec3().cross(pc.Vec3.RIGHT, pc.Vec3.UP);\n     *\n     * // Prints the Z axis (i.e. [0, 0, 1])\n     * console.log(\"The result of the cross product is: \" + back.toString());\n     */\n    cross(lhs, rhs) {\n        // Create temporary variables in case lhs or rhs are 'this'\n        const lx = lhs.x;\n        const ly = lhs.y;\n        const lz = lhs.z;\n        const rx = rhs.x;\n        const ry = rhs.y;\n        const rz = rhs.z;\n\n        this.x = ly * rz - ry * lz;\n        this.y = lz * rx - rz * lx;\n        this.z = lx * ry - rx * ly;\n\n        return this;\n    }\n\n    /**\n     * Returns the distance between the two specified 3-dimensional vectors.\n     *\n     * @param {Vec3} rhs - The second 3-dimensional vector to test.\n     * @returns {number} The distance between the two vectors.\n     * @example\n     * const v1 = new pc.Vec3(5, 10, 20);\n     * const v2 = new pc.Vec3(10, 20, 40);\n     * const d = v1.distance(v2);\n     * console.log(\"The distance between v1 and v2 is: \" + d);\n     */\n    distance(rhs) {\n        const x = this.x - rhs.x;\n        const y = this.y - rhs.y;\n        const z = this.z - rhs.z;\n        return Math.sqrt(x * x + y * y + z * z);\n    }\n\n    /**\n     * Divides a 3-dimensional vector by another in place.\n     *\n     * @param {Vec3} rhs - The vector to divide the specified vector by.\n     * @returns {Vec3} Self for chaining.\n     * @example\n     * const a = new pc.Vec3(4, 9, 16);\n     * const b = new pc.Vec3(2, 3, 4);\n     *\n     * a.div(b);\n     *\n     * // Outputs [2, 3, 4]\n     * console.log(\"The result of the division is: \" + a.toString());\n     */\n    div(rhs) {\n        this.x /= rhs.x;\n        this.y /= rhs.y;\n        this.z /= rhs.z;\n\n        return this;\n    }\n\n    /**\n     * Divides one 3-dimensional vector by another and writes the result to the specified vector.\n     *\n     * @param {Vec3} lhs - The dividend vector (the vector being divided).\n     * @param {Vec3} rhs - The divisor vector (the vector dividing the dividend).\n     * @returns {Vec3} Self for chaining.\n     * @example\n     * const a = new pc.Vec3(4, 9, 16);\n     * const b = new pc.Vec3(2, 3, 4);\n     * const r = new pc.Vec3();\n     *\n     * r.div2(a, b);\n     * // Outputs [2, 3, 4]\n     *\n     * console.log(\"The result of the division is: \" + r.toString());\n     */\n    div2(lhs, rhs) {\n        this.x = lhs.x / rhs.x;\n        this.y = lhs.y / rhs.y;\n        this.z = lhs.z / rhs.z;\n\n        return this;\n    }\n\n    /**\n     * Divides each element of a vector by a number.\n     *\n     * @param {number} scalar - The number to divide by.\n     * @returns {Vec3} Self for chaining.\n     * @example\n     * const vec = new pc.Vec3(3, 6, 9);\n     *\n     * vec.divScalar(3);\n     *\n     * // Outputs [1, 2, 3]\n     * console.log(\"The result of the division is: \" + vec.toString());\n     */\n    divScalar(scalar) {\n        this.x /= scalar;\n        this.y /= scalar;\n        this.z /= scalar;\n\n        return this;\n    }\n\n    /**\n     * Returns the result of a dot product operation performed on the two specified 3-dimensional\n     * vectors.\n     *\n     * @param {Vec3} rhs - The second 3-dimensional vector operand of the dot product.\n     * @returns {number} The result of the dot product operation.\n     * @example\n     * const v1 = new pc.Vec3(5, 10, 20);\n     * const v2 = new pc.Vec3(10, 20, 40);\n     * const v1dotv2 = v1.dot(v2);\n     * console.log(\"The result of the dot product is: \" + v1dotv2);\n     */\n    dot(rhs) {\n        return this.x * rhs.x + this.y * rhs.y + this.z * rhs.z;\n    }\n\n    /**\n     * Reports whether two vectors are equal.\n     *\n     * @param {Vec3} rhs - The vector to compare to the specified vector.\n     * @returns {boolean} True if the vectors are equal and false otherwise.\n     * @example\n     * const a = new pc.Vec3(1, 2, 3);\n     * const b = new pc.Vec3(4, 5, 6);\n     * console.log(\"The two vectors are \" + (a.equals(b) ? \"equal\" : \"different\"));\n     */\n    equals(rhs) {\n        return this.x === rhs.x && this.y === rhs.y && this.z === rhs.z;\n    }\n\n    /**\n     * Reports whether two vectors are equal using an absolute error tolerance.\n     *\n     * @param {Vec3} rhs - The vector to be compared against.\n     * @param {number} [epsilon] - The maximum difference between each component of the two\n     * vectors. Defaults to 1e-6.\n     * @returns {boolean} True if the vectors are equal and false otherwise.\n     * @example\n     * const a = new pc.Vec3();\n     * const b = new pc.Vec3();\n     * console.log(\"The two vectors are approximately \" + (a.equalsApprox(b, 1e-9) ? \"equal\" : \"different\"));\n     */\n    equalsApprox(rhs, epsilon = 1e-6) {\n        return (Math.abs(this.x - rhs.x) < epsilon) &&\n            (Math.abs(this.y - rhs.y) < epsilon) &&\n            (Math.abs(this.z - rhs.z) < epsilon);\n    }\n\n    /**\n     * Returns the magnitude of the specified 3-dimensional vector.\n     *\n     * @returns {number} The magnitude of the specified 3-dimensional vector.\n     * @example\n     * const vec = new pc.Vec3(3, 4, 0);\n     * const len = vec.length();\n     * // Outputs 5\n     * console.log(\"The length of the vector is: \" + len);\n     */\n    length() {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n    /**\n     * Returns the magnitude squared of the specified 3-dimensional vector.\n     *\n     * @returns {number} The magnitude of the specified 3-dimensional vector.\n     * @example\n     * const vec = new pc.Vec3(3, 4, 0);\n     * const len = vec.lengthSq();\n     * // Outputs 25\n     * console.log(\"The length squared of the vector is: \" + len);\n     */\n    lengthSq() {\n        return this.x * this.x + this.y * this.y + this.z * this.z;\n    }\n\n    /**\n     * Returns the result of a linear interpolation between two specified 3-dimensional vectors.\n     *\n     * @param {Vec3} lhs - The 3-dimensional to interpolate from.\n     * @param {Vec3} rhs - The 3-dimensional to interpolate to.\n     * @param {number} alpha - The value controlling the point of interpolation. Between 0 and 1,\n     * the linear interpolant will occur on a straight line between lhs and rhs. Outside of this\n     * range, the linear interpolant will occur on a ray extrapolated from this line.\n     * @returns {Vec3} Self for chaining.\n     * @example\n     * const a = new pc.Vec3(0, 0, 0);\n     * const b = new pc.Vec3(10, 10, 10);\n     * const r = new pc.Vec3();\n     *\n     * r.lerp(a, b, 0);   // r is equal to a\n     * r.lerp(a, b, 0.5); // r is 5, 5, 5\n     * r.lerp(a, b, 1);   // r is equal to b\n     */\n    lerp(lhs, rhs, alpha) {\n        this.x = lhs.x + alpha * (rhs.x - lhs.x);\n        this.y = lhs.y + alpha * (rhs.y - lhs.y);\n        this.z = lhs.z + alpha * (rhs.z - lhs.z);\n\n        return this;\n    }\n\n    /**\n     * Multiplies a 3-dimensional vector to another in place.\n     *\n     * @param {Vec3} rhs - The 3-dimensional vector used as the second multiplicand of the operation.\n     * @returns {Vec3} Self for chaining.\n     * @example\n     * const a = new pc.Vec3(2, 3, 4);\n     * const b = new pc.Vec3(4, 5, 6);\n     *\n     * a.mul(b);\n     *\n     * // Outputs 8, 15, 24\n     * console.log(\"The result of the multiplication is: \" + a.toString());\n     */\n    mul(rhs) {\n        this.x *= rhs.x;\n        this.y *= rhs.y;\n        this.z *= rhs.z;\n\n        return this;\n    }\n\n    /**\n     * Returns the result of multiplying the specified 3-dimensional vectors together.\n     *\n     * @param {Vec3} lhs - The 3-dimensional vector used as the first multiplicand of the operation.\n     * @param {Vec3} rhs - The 3-dimensional vector used as the second multiplicand of the operation.\n     * @returns {Vec3} Self for chaining.\n     * @example\n     * const a = new pc.Vec3(2, 3, 4);\n     * const b = new pc.Vec3(4, 5, 6);\n     * const r = new pc.Vec3();\n     *\n     * r.mul2(a, b);\n     *\n     * // Outputs 8, 15, 24\n     * console.log(\"The result of the multiplication is: \" + r.toString());\n     */\n    mul2(lhs, rhs) {\n        this.x = lhs.x * rhs.x;\n        this.y = lhs.y * rhs.y;\n        this.z = lhs.z * rhs.z;\n\n        return this;\n    }\n\n    /**\n     * Multiplies each element of a vector by a number.\n     *\n     * @param {number} scalar - The number to multiply by.\n     * @returns {Vec3} Self for chaining.\n     * @example\n     * const vec = new pc.Vec3(3, 6, 9);\n     *\n     * vec.mulScalar(3);\n     *\n     * // Outputs [9, 18, 27]\n     * console.log(\"The result of the multiplication is: \" + vec.toString());\n     */\n    mulScalar(scalar) {\n        this.x *= scalar;\n        this.y *= scalar;\n        this.z *= scalar;\n\n        return this;\n    }\n\n    /**\n     * Returns this 3-dimensional vector converted to a unit vector in place. If the vector has a\n     * length of zero, the vector's elements will be set to zero.\n     *\n     * @param {Vec3} [src] - The vector to normalize. If not set, the operation is done in place.\n     * @returns {Vec3} Self for chaining.\n     * @example\n     * const v = new pc.Vec3(25, 0, 0);\n     *\n     * v.normalize();\n     *\n     * // Outputs 1, 0, 0\n     * console.log(\"The result of the vector normalization is: \" + v.toString());\n     */\n    normalize(src = this) {\n        const lengthSq = src.x * src.x + src.y * src.y + src.z * src.z;\n        if (lengthSq > 0) {\n            const invLength = 1 / Math.sqrt(lengthSq);\n            this.x = src.x * invLength;\n            this.y = src.y * invLength;\n            this.z = src.z * invLength;\n        }\n\n        return this;\n    }\n\n    /**\n     * Each element is set to the largest integer less than or equal to its value.\n     *\n     * @param {Vec3} [src] - The vector to floor. If not set, the operation is done in place.\n     * @returns {Vec3} Self for chaining.\n     */\n    floor(src = this) {\n        this.x = Math.floor(src.x);\n        this.y = Math.floor(src.y);\n        this.z = Math.floor(src.z);\n        return this;\n    }\n\n    /**\n     * Each element is rounded up to the next largest integer.\n     *\n     * @param {Vec3} [src] - The vector to ceil. If not set, the operation is done in place.\n     * @returns {Vec3} Self for chaining.\n     */\n    ceil(src = this) {\n        this.x = Math.ceil(src.x);\n        this.y = Math.ceil(src.y);\n        this.z = Math.ceil(src.z);\n        return this;\n    }\n\n    /**\n     * Each element is rounded up or down to the nearest integer.\n     *\n     * @param {Vec3} [src] - The vector to round. If not set, the operation is done in place.\n     * @returns {Vec3} Self for chaining.\n     */\n    round(src = this) {\n        this.x = Math.round(src.x);\n        this.y = Math.round(src.y);\n        this.z = Math.round(src.z);\n        return this;\n    }\n\n    /**\n     * Each element is assigned a value from rhs parameter if it is smaller.\n     *\n     * @param {Vec3} rhs - The 3-dimensional vector used as the source of elements to compare to.\n     * @returns {Vec3} Self for chaining.\n     */\n    min(rhs) {\n        if (rhs.x < this.x) this.x = rhs.x;\n        if (rhs.y < this.y) this.y = rhs.y;\n        if (rhs.z < this.z) this.z = rhs.z;\n        return this;\n    }\n\n    /**\n     * Each element is assigned a value from rhs parameter if it is larger.\n     *\n     * @param {Vec3} rhs - The 3-dimensional vector used as the source of elements to compare to.\n     * @returns {Vec3} Self for chaining.\n     */\n    max(rhs) {\n        if (rhs.x > this.x) this.x = rhs.x;\n        if (rhs.y > this.y) this.y = rhs.y;\n        if (rhs.z > this.z) this.z = rhs.z;\n        return this;\n    }\n\n    /**\n     * Projects this 3-dimensional vector onto the specified vector.\n     *\n     * @param {Vec3} rhs - The vector onto which the original vector will be projected on.\n     * @returns {Vec3} Self for chaining.\n     * @example\n     * const v = new pc.Vec3(5, 5, 5);\n     * const normal = new pc.Vec3(1, 0, 0);\n     *\n     * v.project(normal);\n     *\n     * // Outputs 5, 0, 0\n     * console.log(\"The result of the vector projection is: \" + v.toString());\n     */\n    project(rhs) {\n        const a_dot_b = this.x * rhs.x + this.y * rhs.y + this.z * rhs.z;\n        const b_dot_b = rhs.x * rhs.x + rhs.y * rhs.y + rhs.z * rhs.z;\n        const s = a_dot_b / b_dot_b;\n        this.x = rhs.x * s;\n        this.y = rhs.y * s;\n        this.z = rhs.z * s;\n        return this;\n    }\n\n    /**\n     * Sets the specified 3-dimensional vector to the supplied numerical values.\n     *\n     * @param {number} x - The value to set on the first component of the vector.\n     * @param {number} y - The value to set on the second component of the vector.\n     * @param {number} z - The value to set on the third component of the vector.\n     * @returns {Vec3} Self for chaining.\n     * @example\n     * const v = new pc.Vec3();\n     * v.set(5, 10, 20);\n     *\n     * // Outputs 5, 10, 20\n     * console.log(\"The result of the vector set is: \" + v.toString());\n     */\n    set(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n\n        return this;\n    }\n\n    /**\n     * Subtracts a 3-dimensional vector from another in place.\n     *\n     * @param {Vec3} rhs - The vector to subtract from the specified vector.\n     * @returns {Vec3} Self for chaining.\n     * @example\n     * const a = new pc.Vec3(10, 10, 10);\n     * const b = new pc.Vec3(20, 20, 20);\n     *\n     * a.sub(b);\n     *\n     * // Outputs [-10, -10, -10]\n     * console.log(\"The result of the subtraction is: \" + a.toString());\n     */\n    sub(rhs) {\n        this.x -= rhs.x;\n        this.y -= rhs.y;\n        this.z -= rhs.z;\n\n        return this;\n    }\n\n    /**\n     * Subtracts two 3-dimensional vectors from one another and returns the result.\n     *\n     * @param {Vec3} lhs - The first vector operand for the subtraction.\n     * @param {Vec3} rhs - The second vector operand for the subtraction.\n     * @returns {Vec3} Self for chaining.\n     * @example\n     * const a = new pc.Vec3(10, 10, 10);\n     * const b = new pc.Vec3(20, 20, 20);\n     * const r = new pc.Vec3();\n     *\n     * r.sub2(a, b);\n     *\n     * // Outputs [-10, -10, -10]\n     * console.log(\"The result of the subtraction is: \" + r.toString());\n     */\n    sub2(lhs, rhs) {\n        this.x = lhs.x - rhs.x;\n        this.y = lhs.y - rhs.y;\n        this.z = lhs.z - rhs.z;\n\n        return this;\n    }\n\n    /**\n     * Subtracts a number from each element of a vector.\n     *\n     * @param {number} scalar - The number to subtract.\n     * @returns {Vec3} Self for chaining.\n     * @example\n     * const vec = new pc.Vec3(3, 4, 5);\n     *\n     * vec.subScalar(2);\n     *\n     * // Outputs [1, 2, 3]\n     * console.log(\"The result of the subtraction is: \" + vec.toString());\n     */\n    subScalar(scalar) {\n        this.x -= scalar;\n        this.y -= scalar;\n        this.z -= scalar;\n\n        return this;\n    }\n\n    /**\n     * Converts the vector to string form.\n     *\n     * @returns {string} The vector in string form.\n     * @example\n     * const v = new pc.Vec3(20, 10, 5);\n     * // Outputs [20, 10, 5]\n     * console.log(v.toString());\n     */\n    toString() {\n        return `[${this.x}, ${this.y}, ${this.z}]`;\n    }\n\n    /**\n     * A constant vector set to [0, 0, 0].\n     *\n     * @type {Vec3}\n     * @readonly\n     */\n    static ZERO = Object.freeze(new Vec3(0, 0, 0));\n\n    /**\n     * A constant vector set to [1, 1, 1].\n     *\n     * @type {Vec3}\n     * @readonly\n     */\n    static ONE = Object.freeze(new Vec3(1, 1, 1));\n\n    /**\n     * A constant vector set to [0, 1, 0].\n     *\n     * @type {Vec3}\n     * @readonly\n     */\n    static UP = Object.freeze(new Vec3(0, 1, 0));\n\n    /**\n     * A constant vector set to [0, -1, 0].\n     *\n     * @type {Vec3}\n     * @readonly\n     */\n    static DOWN = Object.freeze(new Vec3(0, -1, 0));\n\n    /**\n     * A constant vector set to [1, 0, 0].\n     *\n     * @type {Vec3}\n     * @readonly\n     */\n    static RIGHT = Object.freeze(new Vec3(1, 0, 0));\n\n    /**\n     * A constant vector set to [-1, 0, 0].\n     *\n     * @type {Vec3}\n     * @readonly\n     */\n    static LEFT = Object.freeze(new Vec3(-1, 0, 0));\n\n    /**\n     * A constant vector set to [0, 0, -1].\n     *\n     * @type {Vec3}\n     * @readonly\n     */\n    static FORWARD = Object.freeze(new Vec3(0, 0, -1));\n\n    /**\n     * A constant vector set to [0, 0, 1].\n     *\n     * @type {Vec3}\n     * @readonly\n     */\n    static BACK = Object.freeze(new Vec3(0, 0, 1));\n}\n\nexport { Vec3 };\n","/**\n * A 4-dimensional vector.\n *\n * @category Math\n */\nclass Vec4 {\n    /**\n     * The first component of the vector.\n     *\n     * @type {number}\n     */\n    x;\n\n    /**\n     * The second component of the vector.\n     *\n     * @type {number}\n     */\n    y;\n\n    /**\n     * The third component of the vector.\n     *\n     * @type {number}\n     */\n    z;\n\n    /**\n     * The fourth component of the vector.\n     *\n     * @type {number}\n     */\n    w;\n\n    /**\n     * Creates a new Vec4 object.\n     *\n     * @param {number|number[]} [x] - The x value. Defaults to 0. If x is an array of length 4, the\n     * array will be used to populate all components.\n     * @param {number} [y] - The y value. Defaults to 0.\n     * @param {number} [z] - The z value. Defaults to 0.\n     * @param {number} [w] - The w value. Defaults to 0.\n     * @example\n     * const v = new pc.Vec4(1, 2, 3, 4);\n     */\n    constructor(x = 0, y = 0, z = 0, w = 0) {\n        if (x.length === 4) {\n            this.x = x[0];\n            this.y = x[1];\n            this.z = x[2];\n            this.w = x[3];\n        } else {\n            this.x = x;\n            this.y = y;\n            this.z = z;\n            this.w = w;\n        }\n    }\n\n    /**\n     * Adds a 4-dimensional vector to another in place.\n     *\n     * @param {Vec4} rhs - The vector to add to the specified vector.\n     * @returns {Vec4} Self for chaining.\n     * @example\n     * const a = new pc.Vec4(10, 10, 10, 10);\n     * const b = new pc.Vec4(20, 20, 20, 20);\n     *\n     * a.add(b);\n     *\n     * // Outputs [30, 30, 30]\n     * console.log(\"The result of the addition is: \" + a.toString());\n     */\n    add(rhs) {\n        this.x += rhs.x;\n        this.y += rhs.y;\n        this.z += rhs.z;\n        this.w += rhs.w;\n\n        return this;\n    }\n\n    /**\n     * Adds two 4-dimensional vectors together and returns the result.\n     *\n     * @param {Vec4} lhs - The first vector operand for the addition.\n     * @param {Vec4} rhs - The second vector operand for the addition.\n     * @returns {Vec4} Self for chaining.\n     * @example\n     * const a = new pc.Vec4(10, 10, 10, 10);\n     * const b = new pc.Vec4(20, 20, 20, 20);\n     * const r = new pc.Vec4();\n     *\n     * r.add2(a, b);\n     * // Outputs [30, 30, 30]\n     *\n     * console.log(\"The result of the addition is: \" + r.toString());\n     */\n    add2(lhs, rhs) {\n        this.x = lhs.x + rhs.x;\n        this.y = lhs.y + rhs.y;\n        this.z = lhs.z + rhs.z;\n        this.w = lhs.w + rhs.w;\n\n        return this;\n    }\n\n    /**\n     * Adds a number to each element of a vector.\n     *\n     * @param {number} scalar - The number to add.\n     * @returns {Vec4} Self for chaining.\n     * @example\n     * const vec = new pc.Vec4(3, 4, 5, 6);\n     *\n     * vec.addScalar(2);\n     *\n     * // Outputs [5, 6, 7, 8]\n     * console.log(\"The result of the addition is: \" + vec.toString());\n     */\n    addScalar(scalar) {\n        this.x += scalar;\n        this.y += scalar;\n        this.z += scalar;\n        this.w += scalar;\n\n        return this;\n    }\n\n    /**\n     * Adds a 4-dimensional vector scaled by scalar value. Does not modify the vector being added.\n     *\n     * @param {Vec4} rhs - The vector to add to the specified vector.\n     * @param {number} scalar - The number to multiply the added vector with.\n     * @returns {Vec4} Self for chaining.\n     * @example\n     * const vec = new pc.Vec4(1, 2, 3, 4);\n     *\n     * vec.addScaled(pc.Vec4.ONE, 2);\n     *\n     * // Outputs [3, 4, 5, 6]\n     * console.log(\"The result of the addition is: \" + vec.toString());\n     */\n    addScaled(rhs, scalar) {\n        this.x += rhs.x * scalar;\n        this.y += rhs.y * scalar;\n        this.z += rhs.z * scalar;\n        this.w += rhs.w * scalar;\n\n        return this;\n    }\n\n    /**\n     * Returns an identical copy of the specified 4-dimensional vector.\n     *\n     * @returns {this} A 4-dimensional vector containing the result of the cloning.\n     * @example\n     * const v = new pc.Vec4(10, 20, 30, 40);\n     * const vclone = v.clone();\n     * console.log(\"The result of the cloning is: \" + vclone.toString());\n     */\n    clone() {\n        /** @type {this} */\n        const cstr = this.constructor;\n        return new cstr(this.x, this.y, this.z, this.w);\n    }\n\n    /**\n     * Copies the contents of a source 4-dimensional vector to a destination 4-dimensional vector.\n     *\n     * @param {Vec4} rhs - A vector to copy to the specified vector.\n     * @returns {Vec4} Self for chaining.\n     * @example\n     * const src = new pc.Vec4(10, 20, 30, 40);\n     * const dst = new pc.Vec4();\n     *\n     * dst.copy(src);\n     *\n     * console.log(\"The two vectors are \" + (dst.equals(src) ? \"equal\" : \"different\"));\n     */\n    copy(rhs) {\n        this.x = rhs.x;\n        this.y = rhs.y;\n        this.z = rhs.z;\n        this.w = rhs.w;\n\n        return this;\n    }\n\n    /**\n     * Divides a 4-dimensional vector by another in place.\n     *\n     * @param {Vec4} rhs - The vector to divide the specified vector by.\n     * @returns {Vec4} Self for chaining.\n     * @example\n     * const a = new pc.Vec4(4, 9, 16, 25);\n     * const b = new pc.Vec4(2, 3, 4, 5);\n     *\n     * a.div(b);\n     *\n     * // Outputs [2, 3, 4, 5]\n     * console.log(\"The result of the division is: \" + a.toString());\n     */\n    div(rhs) {\n        this.x /= rhs.x;\n        this.y /= rhs.y;\n        this.z /= rhs.z;\n        this.w /= rhs.w;\n\n        return this;\n    }\n\n    /**\n     * Divides one 4-dimensional vector by another and writes the result to the specified vector.\n     *\n     * @param {Vec4} lhs - The dividend vector (the vector being divided).\n     * @param {Vec4} rhs - The divisor vector (the vector dividing the dividend).\n     * @returns {Vec4} Self for chaining.\n     * @example\n     * const a = new pc.Vec4(4, 9, 16, 25);\n     * const b = new pc.Vec4(2, 3, 4, 5);\n     * const r = new pc.Vec4();\n     *\n     * r.div2(a, b);\n     * // Outputs [2, 3, 4, 5]\n     *\n     * console.log(\"The result of the division is: \" + r.toString());\n     */\n    div2(lhs, rhs) {\n        this.x = lhs.x / rhs.x;\n        this.y = lhs.y / rhs.y;\n        this.z = lhs.z / rhs.z;\n        this.w = lhs.w / rhs.w;\n\n        return this;\n    }\n\n    /**\n     * Divides each element of a vector by a number.\n     *\n     * @param {number} scalar - The number to divide by.\n     * @returns {Vec4} Self for chaining.\n     * @example\n     * const vec = new pc.Vec4(3, 6, 9, 12);\n     *\n     * vec.divScalar(3);\n     *\n     * // Outputs [1, 2, 3, 4]\n     * console.log(\"The result of the division is: \" + vec.toString());\n     */\n    divScalar(scalar) {\n        this.x /= scalar;\n        this.y /= scalar;\n        this.z /= scalar;\n        this.w /= scalar;\n\n        return this;\n    }\n\n    /**\n     * Returns the result of a dot product operation performed on the two specified 4-dimensional\n     * vectors.\n     *\n     * @param {Vec4} rhs - The second 4-dimensional vector operand of the dot product.\n     * @returns {number} The result of the dot product operation.\n     * @example\n     * const v1 = new pc.Vec4(5, 10, 20, 40);\n     * const v2 = new pc.Vec4(10, 20, 40, 80);\n     * const v1dotv2 = v1.dot(v2);\n     * console.log(\"The result of the dot product is: \" + v1dotv2);\n     */\n    dot(rhs) {\n        return this.x * rhs.x + this.y * rhs.y + this.z * rhs.z + this.w * rhs.w;\n    }\n\n    /**\n     * Reports whether two vectors are equal.\n     *\n     * @param {Vec4} rhs - The vector to compare to the specified vector.\n     * @returns {boolean} True if the vectors are equal and false otherwise.\n     * @example\n     * const a = new pc.Vec4(1, 2, 3, 4);\n     * const b = new pc.Vec4(5, 6, 7, 8);\n     * console.log(\"The two vectors are \" + (a.equals(b) ? \"equal\" : \"different\"));\n     */\n    equals(rhs) {\n        return this.x === rhs.x && this.y === rhs.y && this.z === rhs.z && this.w === rhs.w;\n    }\n\n    /**\n     * Reports whether two vectors are equal using an absolute error tolerance.\n     *\n     * @param {Vec4} rhs - The vector to be compared against.\n     * @param {number} [epsilon] - The maximum difference between each component of the two\n     * vectors. Defaults to 1e-6.\n     * @returns {boolean} True if the vectors are equal and false otherwise.\n     * @example\n     * const a = new pc.Vec4();\n     * const b = new pc.Vec4();\n     * console.log(\"The two vectors are approximately \" + (a.equalsApprox(b, 1e-9) ? \"equal\" : \"different\"));\n     */\n    equalsApprox(rhs, epsilon = 1e-6) {\n        return (Math.abs(this.x - rhs.x) < epsilon) &&\n            (Math.abs(this.y - rhs.y) < epsilon) &&\n            (Math.abs(this.z - rhs.z) < epsilon) &&\n            (Math.abs(this.w - rhs.w) < epsilon);\n    }\n\n    /**\n     * Returns the magnitude of the specified 4-dimensional vector.\n     *\n     * @returns {number} The magnitude of the specified 4-dimensional vector.\n     * @example\n     * const vec = new pc.Vec4(3, 4, 0, 0);\n     * const len = vec.length();\n     * // Outputs 5\n     * console.log(\"The length of the vector is: \" + len);\n     */\n    length() {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n    }\n\n    /**\n     * Returns the magnitude squared of the specified 4-dimensional vector.\n     *\n     * @returns {number} The magnitude of the specified 4-dimensional vector.\n     * @example\n     * const vec = new pc.Vec4(3, 4, 0);\n     * const len = vec.lengthSq();\n     * // Outputs 25\n     * console.log(\"The length squared of the vector is: \" + len);\n     */\n    lengthSq() {\n        return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n    }\n\n    /**\n     * Returns the result of a linear interpolation between two specified 4-dimensional vectors.\n     *\n     * @param {Vec4} lhs - The 4-dimensional to interpolate from.\n     * @param {Vec4} rhs - The 4-dimensional to interpolate to.\n     * @param {number} alpha - The value controlling the point of interpolation. Between 0 and 1,\n     * the linear interpolant will occur on a straight line between lhs and rhs. Outside of this\n     * range, the linear interpolant will occur on a ray extrapolated from this line.\n     * @returns {Vec4} Self for chaining.\n     * @example\n     * const a = new pc.Vec4(0, 0, 0, 0);\n     * const b = new pc.Vec4(10, 10, 10, 10);\n     * const r = new pc.Vec4();\n     *\n     * r.lerp(a, b, 0);   // r is equal to a\n     * r.lerp(a, b, 0.5); // r is 5, 5, 5, 5\n     * r.lerp(a, b, 1);   // r is equal to b\n     */\n    lerp(lhs, rhs, alpha) {\n        this.x = lhs.x + alpha * (rhs.x - lhs.x);\n        this.y = lhs.y + alpha * (rhs.y - lhs.y);\n        this.z = lhs.z + alpha * (rhs.z - lhs.z);\n        this.w = lhs.w + alpha * (rhs.w - lhs.w);\n\n        return this;\n    }\n\n    /**\n     * Multiplies a 4-dimensional vector to another in place.\n     *\n     * @param {Vec4} rhs - The 4-dimensional vector used as the second multiplicand of the operation.\n     * @returns {Vec4} Self for chaining.\n     * @example\n     * const a = new pc.Vec4(2, 3, 4, 5);\n     * const b = new pc.Vec4(4, 5, 6, 7);\n     *\n     * a.mul(b);\n     *\n     * // Outputs 8, 15, 24, 35\n     * console.log(\"The result of the multiplication is: \" + a.toString());\n     */\n    mul(rhs) {\n        this.x *= rhs.x;\n        this.y *= rhs.y;\n        this.z *= rhs.z;\n        this.w *= rhs.w;\n\n        return this;\n    }\n\n    /**\n     * Returns the result of multiplying the specified 4-dimensional vectors together.\n     *\n     * @param {Vec4} lhs - The 4-dimensional vector used as the first multiplicand of the operation.\n     * @param {Vec4} rhs - The 4-dimensional vector used as the second multiplicand of the operation.\n     * @returns {Vec4} Self for chaining.\n     * @example\n     * const a = new pc.Vec4(2, 3, 4, 5);\n     * const b = new pc.Vec4(4, 5, 6, 7);\n     * const r = new pc.Vec4();\n     *\n     * r.mul2(a, b);\n     *\n     * // Outputs 8, 15, 24, 35\n     * console.log(\"The result of the multiplication is: \" + r.toString());\n     */\n    mul2(lhs, rhs) {\n        this.x = lhs.x * rhs.x;\n        this.y = lhs.y * rhs.y;\n        this.z = lhs.z * rhs.z;\n        this.w = lhs.w * rhs.w;\n\n        return this;\n    }\n\n    /**\n     * Multiplies each element of a vector by a number.\n     *\n     * @param {number} scalar - The number to multiply by.\n     * @returns {Vec4} Self for chaining.\n     * @example\n     * const vec = new pc.Vec4(3, 6, 9, 12);\n     *\n     * vec.mulScalar(3);\n     *\n     * // Outputs [9, 18, 27, 36]\n     * console.log(\"The result of the multiplication is: \" + vec.toString());\n     */\n    mulScalar(scalar) {\n        this.x *= scalar;\n        this.y *= scalar;\n        this.z *= scalar;\n        this.w *= scalar;\n\n        return this;\n    }\n\n    /**\n     * Returns this 4-dimensional vector converted to a unit vector in place. If the vector has a\n     * length of zero, the vector's elements will be set to zero.\n     *\n     * @param {Vec4} [src] - The vector to normalize. If not set, the operation is done in place.\n     * @returns {Vec4} Self for chaining.\n     * @example\n     * const v = new pc.Vec4(25, 0, 0, 0);\n     *\n     * v.normalize();\n     *\n     * // Outputs 1, 0, 0, 0\n     * console.log(\"The result of the vector normalization is: \" + v.toString());\n     */\n    normalize(src = this) {\n        const lengthSq = src.x * src.x + src.y * src.y + src.z * src.z + src.w * src.w;\n        if (lengthSq > 0) {\n            const invLength = 1 / Math.sqrt(lengthSq);\n            this.x = src.x * invLength;\n            this.y = src.y * invLength;\n            this.z = src.z * invLength;\n            this.w = src.w * invLength;\n        }\n\n        return this;\n    }\n\n    /**\n     * Each element is set to the largest integer less than or equal to its value.\n     *\n     * @param {Vec4} [src] - The vector to floor. If not set, the operation is done in place.\n     * @returns {Vec4} Self for chaining.\n     */\n    floor(src = this) {\n        this.x = Math.floor(src.x);\n        this.y = Math.floor(src.y);\n        this.z = Math.floor(src.z);\n        this.w = Math.floor(src.w);\n        return this;\n    }\n\n    /**\n     * Each element is rounded up to the next largest integer.\n     *\n     * @param {Vec4} [src] - The vector to ceil. If not set, the operation is done in place.\n     * @returns {Vec4} Self for chaining.\n     */\n    ceil(src = this) {\n        this.x = Math.ceil(src.x);\n        this.y = Math.ceil(src.y);\n        this.z = Math.ceil(src.z);\n        this.w = Math.ceil(src.w);\n        return this;\n    }\n\n    /**\n     * Each element is rounded up or down to the nearest integer.\n     *\n     * @param {Vec4} [src] - The vector to round. If not set, the operation is done in place.\n     * @returns {Vec4} Self for chaining.\n     */\n    round(src = this) {\n        this.x = Math.round(src.x);\n        this.y = Math.round(src.y);\n        this.z = Math.round(src.z);\n        this.w = Math.round(src.w);\n        return this;\n    }\n\n    /**\n     * Each element is assigned a value from rhs parameter if it is smaller.\n     *\n     * @param {Vec4} rhs - The 4-dimensional vector used as the source of elements to compare to.\n     * @returns {Vec4} Self for chaining.\n     */\n    min(rhs) {\n        if (rhs.x < this.x) this.x = rhs.x;\n        if (rhs.y < this.y) this.y = rhs.y;\n        if (rhs.z < this.z) this.z = rhs.z;\n        if (rhs.w < this.w) this.w = rhs.w;\n        return this;\n    }\n\n    /**\n     * Each element is assigned a value from rhs parameter if it is larger.\n     *\n     * @param {Vec4} rhs - The 4-dimensional vector used as the source of elements to compare to.\n     * @returns {Vec4} Self for chaining.\n     */\n    max(rhs) {\n        if (rhs.x > this.x) this.x = rhs.x;\n        if (rhs.y > this.y) this.y = rhs.y;\n        if (rhs.z > this.z) this.z = rhs.z;\n        if (rhs.w > this.w) this.w = rhs.w;\n        return this;\n    }\n\n    /**\n     * Sets the specified 4-dimensional vector to the supplied numerical values.\n     *\n     * @param {number} x - The value to set on the first component of the vector.\n     * @param {number} y - The value to set on the second component of the vector.\n     * @param {number} z - The value to set on the third component of the vector.\n     * @param {number} w - The value to set on the fourth component of the vector.\n     * @returns {Vec4} Self for chaining.\n     * @example\n     * const v = new pc.Vec4();\n     * v.set(5, 10, 20, 40);\n     *\n     * // Outputs 5, 10, 20, 40\n     * console.log(\"The result of the vector set is: \" + v.toString());\n     */\n    set(x, y, z, w) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n\n        return this;\n    }\n\n    /**\n     * Subtracts a 4-dimensional vector from another in place.\n     *\n     * @param {Vec4} rhs - The vector to add to the specified vector.\n     * @returns {Vec4} Self for chaining.\n     * @example\n     * const a = new pc.Vec4(10, 10, 10, 10);\n     * const b = new pc.Vec4(20, 20, 20, 20);\n     *\n     * a.sub(b);\n     *\n     * // Outputs [-10, -10, -10, -10]\n     * console.log(\"The result of the subtraction is: \" + a.toString());\n     */\n    sub(rhs) {\n        this.x -= rhs.x;\n        this.y -= rhs.y;\n        this.z -= rhs.z;\n        this.w -= rhs.w;\n\n        return this;\n    }\n\n    /**\n     * Subtracts two 4-dimensional vectors from one another and returns the result.\n     *\n     * @param {Vec4} lhs - The first vector operand for the subtraction.\n     * @param {Vec4} rhs - The second vector operand for the subtraction.\n     * @returns {Vec4} Self for chaining.\n     * @example\n     * const a = new pc.Vec4(10, 10, 10, 10);\n     * const b = new pc.Vec4(20, 20, 20, 20);\n     * const r = new pc.Vec4();\n     *\n     * r.sub2(a, b);\n     *\n     * // Outputs [-10, -10, -10, -10]\n     * console.log(\"The result of the subtraction is: \" + r.toString());\n     */\n    sub2(lhs, rhs) {\n        this.x = lhs.x - rhs.x;\n        this.y = lhs.y - rhs.y;\n        this.z = lhs.z - rhs.z;\n        this.w = lhs.w - rhs.w;\n\n        return this;\n    }\n\n    /**\n     * Subtracts a number from each element of a vector.\n     *\n     * @param {number} scalar - The number to subtract.\n     * @returns {Vec4} Self for chaining.\n     * @example\n     * const vec = new pc.Vec4(3, 4, 5, 6);\n     *\n     * vec.subScalar(2);\n     *\n     * // Outputs [1, 2, 3, 4]\n     * console.log(\"The result of the subtraction is: \" + vec.toString());\n     */\n    subScalar(scalar) {\n        this.x -= scalar;\n        this.y -= scalar;\n        this.z -= scalar;\n        this.w -= scalar;\n\n        return this;\n    }\n\n    /**\n     * Converts the vector to string form.\n     *\n     * @returns {string} The vector in string form.\n     * @example\n     * const v = new pc.Vec4(20, 10, 5, 0);\n     * // Outputs [20, 10, 5, 0]\n     * console.log(v.toString());\n     */\n    toString() {\n        return `[${this.x}, ${this.y}, ${this.z}, ${this.w}]`;\n    }\n\n    /**\n     * A constant vector set to [0, 0, 0, 0].\n     *\n     * @type {Vec4}\n     * @readonly\n     */\n    static ZERO = Object.freeze(new Vec4(0, 0, 0, 0));\n\n    /**\n     * A constant vector set to [1, 1, 1, 1].\n     *\n     * @type {Vec4}\n     * @readonly\n     */\n    static ONE = Object.freeze(new Vec4(1, 1, 1, 1));\n}\n\nexport { Vec4 };\n","import { EventHandler } from '../../core/event-handler.js';\n\nimport { Color } from '../../core/math/color.js';\nimport { Vec2 } from '../../core/math/vec2.js';\nimport { Vec3 } from '../../core/math/vec3.js';\nimport { Vec4 } from '../../core/math/vec4.js';\n\n/**\n * Component Systems contain the logic and functionality to update all Components of a particular\n * type.\n *\n * @augments EventHandler\n */\nclass ComponentSystem extends EventHandler {\n    /**\n     * Create a new ComponentSystem instance.\n     *\n     * @param {import('../app-base.js').AppBase} app - The application managing this system.\n     */\n    constructor(app) {\n        super();\n\n        this.app = app;\n\n        // The store where all ComponentData objects are kept\n        this.store = {};\n        this.schema = [];\n    }\n\n    /**\n     * Create new {@link Component} and component data instances and attach them to the entity.\n     *\n     * @param {import('../entity.js').Entity} entity - The Entity to attach this component to.\n     * @param {object} [data] - The source data with which to create the component.\n     * @returns {import('./component.js').Component} Returns a Component of type defined by the\n     * component system.\n     * @example\n     * const entity = new pc.Entity(app);\n     * app.systems.model.addComponent(entity, { type: 'box' });\n     * // entity.model is now set to a pc.ModelComponent\n     * @ignore\n     */\n    addComponent(entity, data = {}) {\n        const component = new this.ComponentType(this, entity);\n        const componentData = new this.DataType();\n\n        this.store[entity.getGuid()] = {\n            entity: entity,\n            data: componentData\n        };\n\n        entity[this.id] = component;\n        entity.c[this.id] = component;\n\n        this.initializeComponentData(component, data, []);\n\n        this.fire('add', entity, component);\n\n        return component;\n    }\n\n    /**\n     * Remove the {@link Component} from the entity and delete the associated component data.\n     *\n     * @param {import('../entity.js').Entity} entity - The entity to remove the component from.\n     * @example\n     * app.systems.model.removeComponent(entity);\n     * // entity.model === undefined\n     * @ignore\n     */\n    removeComponent(entity) {\n        const record = this.store[entity.getGuid()];\n        const component = entity.c[this.id];\n\n        this.fire('beforeremove', entity, component);\n\n        delete this.store[entity.getGuid()];\n\n        entity[this.id] = undefined;\n        delete entity.c[this.id];\n\n        this.fire('remove', entity, record.data);\n    }\n\n    /**\n     * Create a clone of component. This creates a copy of all component data variables.\n     *\n     * @param {import('../entity.js').Entity} entity - The entity to clone the component from.\n     * @param {import('../entity.js').Entity} clone - The entity to clone the component into.\n     * @returns {import('./component.js').Component} The newly cloned component.\n     * @ignore\n     */\n    cloneComponent(entity, clone) {\n        // default clone is just to add a new component with existing data\n        const src = this.store[entity.getGuid()];\n        return this.addComponent(clone, src.data);\n    }\n\n    /**\n     * Called during {@link ComponentSystem#addComponent} to initialize the component data in the\n     * store. This can be overridden by derived Component Systems and either called by the derived\n     * System or replaced entirely.\n     *\n     * @param {import('./component.js').Component} component - The component being initialized.\n     * @param {object} data - The data block used to initialize the component.\n     * @param {Array<string | {name: string, type: string}>} properties - The array of property\n     * descriptors for the component. A descriptor can be either a plain property name, or an\n     * object specifying the name and type.\n     * @ignore\n     */\n    initializeComponentData(component, data = {}, properties) {\n        // initialize\n        for (let i = 0, len = properties.length; i < len; i++) {\n            const descriptor = properties[i];\n            let name, type;\n\n            // If the descriptor is an object, it will have `name` and `type` members\n            if (typeof descriptor === 'object') {\n                name = descriptor.name;\n                type = descriptor.type;\n            } else {\n                // Otherwise, the descriptor is just the property name\n                name = descriptor;\n                type = undefined;\n            }\n\n            let value = data[name];\n\n            if (value !== undefined) {\n                // If we know the intended type of the value, convert the raw data\n                // into an instance of the specified type.\n                if (type !== undefined) {\n                    value = convertValue(value, type);\n                }\n\n                component[name] = value;\n            } else {\n                component[name] = component.data[name];\n            }\n        }\n\n        // after component is initialized call onEnable\n        if (component.enabled && component.entity.enabled) {\n            component.onEnable();\n        }\n    }\n\n    /**\n     * Searches the component schema for properties that match the specified type.\n     *\n     * @param {string} type - The type to search for.\n     * @returns {string[]|object[]} An array of property descriptors matching the specified type.\n     * @ignore\n     */\n    getPropertiesOfType(type) {\n        const matchingProperties = [];\n        const schema = this.schema || [];\n\n        schema.forEach(function (descriptor) {\n            if (descriptor && typeof descriptor === 'object' && descriptor.type === type) {\n                matchingProperties.push(descriptor);\n            }\n        });\n\n        return matchingProperties;\n    }\n\n    destroy() {\n        this.off();\n    }\n}\n\nfunction convertValue(value, type) {\n    if (!value) {\n        return value;\n    }\n\n    switch (type) {\n        case 'rgb':\n            if (value instanceof Color) {\n                return value.clone();\n            }\n            return new Color(value[0], value[1], value[2]);\n        case 'rgba':\n            if (value instanceof Color) {\n                return value.clone();\n            }\n            return new Color(value[0], value[1], value[2], value[3]);\n        case 'vec2':\n            if (value instanceof Vec2) {\n                return value.clone();\n            }\n            return new Vec2(value[0], value[1]);\n        case 'vec3':\n            if (value instanceof Vec3) {\n                return value.clone();\n            }\n            return new Vec3(value[0], value[1], value[2]);\n        case 'vec4':\n            if (value instanceof Vec4) {\n                return value.clone();\n            }\n            return new Vec4(value[0], value[1], value[2], value[3]);\n        case 'boolean':\n        case 'number':\n        case 'string':\n            return value;\n        case 'entity':\n            return value; // Entity fields should just be a string guid\n        default:\n            throw new Error('Could not convert unhandled type: ' + type);\n    }\n}\n\nexport { ComponentSystem };\n","// vox loading\n\nimport { Component } from '../../src/framework/components/component.js';\nimport { ComponentSystem } from '../../src/framework/components/system.js';\n\nconst defaultPalette = new Uint8Array(new Uint32Array([\n    0x00000000, 0xffffffff, 0xffccffff, 0xff99ffff, 0xff66ffff, 0xff33ffff, 0xff00ffff, 0xffffccff, 0xffccccff, 0xff99ccff, 0xff66ccff, 0xff33ccff, 0xff00ccff, 0xffff99ff, 0xffcc99ff, 0xff9999ff,\n    0xff6699ff, 0xff3399ff, 0xff0099ff, 0xffff66ff, 0xffcc66ff, 0xff9966ff, 0xff6666ff, 0xff3366ff, 0xff0066ff, 0xffff33ff, 0xffcc33ff, 0xff9933ff, 0xff6633ff, 0xff3333ff, 0xff0033ff, 0xffff00ff,\n    0xffcc00ff, 0xff9900ff, 0xff6600ff, 0xff3300ff, 0xff0000ff, 0xffffffcc, 0xffccffcc, 0xff99ffcc, 0xff66ffcc, 0xff33ffcc, 0xff00ffcc, 0xffffcccc, 0xffcccccc, 0xff99cccc, 0xff66cccc, 0xff33cccc,\n    0xff00cccc, 0xffff99cc, 0xffcc99cc, 0xff9999cc, 0xff6699cc, 0xff3399cc, 0xff0099cc, 0xffff66cc, 0xffcc66cc, 0xff9966cc, 0xff6666cc, 0xff3366cc, 0xff0066cc, 0xffff33cc, 0xffcc33cc, 0xff9933cc,\n    0xff6633cc, 0xff3333cc, 0xff0033cc, 0xffff00cc, 0xffcc00cc, 0xff9900cc, 0xff6600cc, 0xff3300cc, 0xff0000cc, 0xffffff99, 0xffccff99, 0xff99ff99, 0xff66ff99, 0xff33ff99, 0xff00ff99, 0xffffcc99,\n    0xffcccc99, 0xff99cc99, 0xff66cc99, 0xff33cc99, 0xff00cc99, 0xffff9999, 0xffcc9999, 0xff999999, 0xff669999, 0xff339999, 0xff009999, 0xffff6699, 0xffcc6699, 0xff996699, 0xff666699, 0xff336699,\n    0xff006699, 0xffff3399, 0xffcc3399, 0xff993399, 0xff663399, 0xff333399, 0xff003399, 0xffff0099, 0xffcc0099, 0xff990099, 0xff660099, 0xff330099, 0xff000099, 0xffffff66, 0xffccff66, 0xff99ff66,\n    0xff66ff66, 0xff33ff66, 0xff00ff66, 0xffffcc66, 0xffcccc66, 0xff99cc66, 0xff66cc66, 0xff33cc66, 0xff00cc66, 0xffff9966, 0xffcc9966, 0xff999966, 0xff669966, 0xff339966, 0xff009966, 0xffff6666,\n    0xffcc6666, 0xff996666, 0xff666666, 0xff336666, 0xff006666, 0xffff3366, 0xffcc3366, 0xff993366, 0xff663366, 0xff333366, 0xff003366, 0xffff0066, 0xffcc0066, 0xff990066, 0xff660066, 0xff330066,\n    0xff000066, 0xffffff33, 0xffccff33, 0xff99ff33, 0xff66ff33, 0xff33ff33, 0xff00ff33, 0xffffcc33, 0xffcccc33, 0xff99cc33, 0xff66cc33, 0xff33cc33, 0xff00cc33, 0xffff9933, 0xffcc9933, 0xff999933,\n    0xff669933, 0xff339933, 0xff009933, 0xffff6633, 0xffcc6633, 0xff996633, 0xff666633, 0xff336633, 0xff006633, 0xffff3333, 0xffcc3333, 0xff993333, 0xff663333, 0xff333333, 0xff003333, 0xffff0033,\n    0xffcc0033, 0xff990033, 0xff660033, 0xff330033, 0xff000033, 0xffffff00, 0xffccff00, 0xff99ff00, 0xff66ff00, 0xff33ff00, 0xff00ff00, 0xffffcc00, 0xffcccc00, 0xff99cc00, 0xff66cc00, 0xff33cc00,\n    0xff00cc00, 0xffff9900, 0xffcc9900, 0xff999900, 0xff669900, 0xff339900, 0xff009900, 0xffff6600, 0xffcc6600, 0xff996600, 0xff666600, 0xff336600, 0xff006600, 0xffff3300, 0xffcc3300, 0xff993300,\n    0xff663300, 0xff333300, 0xff003300, 0xffff0000, 0xffcc0000, 0xff990000, 0xff660000, 0xff330000, 0xff0000ee, 0xff0000dd, 0xff0000bb, 0xff0000aa, 0xff000088, 0xff000077, 0xff000055, 0xff000044,\n    0xff000022, 0xff000011, 0xff00ee00, 0xff00dd00, 0xff00bb00, 0xff00aa00, 0xff008800, 0xff007700, 0xff005500, 0xff004400, 0xff002200, 0xff001100, 0xffee0000, 0xffdd0000, 0xffbb0000, 0xffaa0000,\n    0xff880000, 0xff770000, 0xff550000, 0xff440000, 0xff220000, 0xff110000, 0xffeeeeee, 0xffdddddd, 0xffbbbbbb, 0xffaaaaaa, 0xff888888, 0xff777777, 0xff555555, 0xff444444, 0xff222222, 0xff111111\n]).buffer);\n\nclass VoxPalette {\n    constructor(paletteData) {\n        this.data = paletteData;\n        this.tmp = [0, 0, 0, 0];\n    }\n\n    clr(index) {\n        const tmp = this.tmp;\n        tmp[0] = this.data[index * 4 + 0];\n        tmp[1] = this.data[index * 4 + 1];\n        tmp[2] = this.data[index * 4 + 2];\n        tmp[3] = this.data[index * 4 + 3];\n        return tmp;\n    }\n}\n\n// map x->x, y->z, z->y\nconst _x = 0;\nconst _y = 2;\nconst _z = 1;\n\nclass VoxFrame {\n    constructor(voxelData) {\n        this._data = voxelData;\n        this._bound = null;\n        this._flattened = null;\n    }\n\n    get data() {\n        return this._data;\n    }\n\n    get numVoxels() {\n        return this.data.length / 4;\n    }\n\n    get bound() {\n        if (!this._bound) {\n            const data = this.data;\n            const min = [data[_x], data[_y], data[_z]];\n            const max = [data[_x], data[_y], data[_z]];\n\n            const numVoxels = this.numVoxels;\n            for (let i = 1; i < numVoxels; ++i) {\n                const x = data[i * 4 + _x];\n                const y = data[i * 4 + _y];\n                const z = data[i * 4 + _z];\n                if (x < min[0]) min[0] = x; else if (x > max[0]) max[0] = x;\n                if (y < min[1]) min[1] = y; else if (y > max[1]) max[1] = y;\n                if (z < min[2]) min[2] = z; else if (z > max[2]) max[2] = z;\n            }\n            this._bound = {\n                min: min,\n                max: max,\n                extent: [max[0] - min[0] + 1, max[1] - min[1] + 1, max[2] - min[2] + 1]\n            };\n        }\n\n        return this._bound;\n    }\n\n    get flattened() {\n        if (!this._flattened) {\n            const data = this.data;\n            const min = this.bound.min;\n            const extent = this.bound.extent;\n            const flattenedData = new Uint8Array(extent[0] * extent[1] * extent[2]);\n\n            const numVoxels = this.numVoxels;\n            for (let i = 0; i < numVoxels; ++i) {\n                const index = (data[i * 4 + _x] - min[0]) +\n                            (data[i * 4 + _y] - min[1]) * extent[0] +\n                            (data[i * 4 + _z] - min[2]) * extent[0] * extent[1];\n                flattenedData[index] = data[i * 4 + 3];\n            }\n\n            this._flattened = {\n                extent: extent,\n                data: flattenedData,\n                at: (x, y, z) => {\n                    if (x < 0 || y < 0 || z < 0 || x >= extent[0] || y >= extent[1] || z >= extent[2]) {\n                        return 0;\n                    }\n                    const index = x + y * extent[0] + z * extent[0] * extent[1];\n                    return flattenedData[index];\n                }\n            };\n        }\n        return this._flattened;\n    }\n}\n\nclass VoxModel {\n    constructor() {\n        this.frames = [];\n        this.palette = null;\n    }\n\n    addFrame(frame) {\n        this.frames.push(frame);\n    }\n\n    setPalette(palette) {\n        this.palette = palette;\n    }\n}\n\nclass VoxLoader {\n    static load(arrayBuffer) {\n        const rs = new pc.ReadStream(arrayBuffer);\n\n        const readChunkHeader = () => {\n            return {\n                id: rs.readChars(4),\n                numBytes: rs.readU32(),\n                numChildBytes: rs.readU32()\n            };\n        };\n\n        const fileId = rs.readChars(4);\n        if (fileId !== 'VOX ') {\n            console.log('invalid vox header');\n            return null;\n        }\n\n        const version = rs.readU32();\n        if (version !== 150) {\n            console.log('invalid vox version');\n            return null;\n        }\n\n        const mainChunk = readChunkHeader();\n        if (mainChunk.id !== 'MAIN') {\n            console.log('invalid first chunk in vox');\n            return null;\n        }\n\n        const voxModel = new VoxModel();\n        while (rs.offset < mainChunk.numChildBytes) {\n            const chunk = readChunkHeader();\n\n            switch (chunk.id) {\n                case 'XYZI': {\n                    const numVoxels = rs.readU32();\n                    voxModel.addFrame(new VoxFrame(new Uint8Array(arrayBuffer, rs.offset, numVoxels * 4)));\n                    rs.skip(numVoxels * 4);\n                    break;\n                }\n                case 'RGBA': {\n                    const tmp = new Uint8Array(arrayBuffer, rs.offset, 256 * 4);\n                    const data = new Uint8Array(256 * 4);\n                    for (let i = 0; i < 255; ++i) {\n                        data[(i + 1) * 4 + 0] = tmp[i * 4 + 0];\n                        data[(i + 1) * 4 + 1] = tmp[i * 4 + 1];\n                        data[(i + 1) * 4 + 2] = tmp[i * 4 + 2];\n                        data[(i + 1) * 4 + 3] = tmp[i * 4 + 3];\n                    }\n                    voxModel.setPalette(new VoxPalette(new Uint8Array(data.buffer)));\n                    rs.skip(256 * 6);\n                    break;\n                }\n                default:\n                    // skip other chunks\n                    rs.skip(chunk.numBytes + chunk.numChildBytes);\n                    break;\n            }\n        }\n\n        if (!voxModel.palette) {\n            voxModel.setPalette(new VoxPalette(defaultPalette));\n        }\n\n        return voxModel;\n    }\n}\n\n// vox mesh generation\n\nconst vset = (v0, v1) => {\n    v0[0] = v1[0];\n    v0[1] = v1[1];\n    v0[2] = v1[2];\n};\n\nconst vadd = (v0, v1) => {\n    v0[0] += v1[0];\n    v0[1] += v1[1];\n    v0[2] += v1[2];\n};\n\nconst vsub = (v0, v1) => {\n    v0[0] -= v1[0];\n    v0[1] -= v1[1];\n    v0[2] -= v1[2];\n};\n\nclass VoxGen {\n    static mesh(device, voxMesh, frame) {\n        const voxFrame = voxMesh.frames[frame];\n\n        if (!voxFrame) {\n            return null;\n        }\n\n        const flattened = voxFrame.flattened;\n\n        const positions = [];\n        const normals = [];\n        const colors = [];\n        const indices = [];\n\n        const pos = [0, 0, 0];\n        const tmp = [0, 0, 0];\n\n        const quad = (axis1, axis2, normal, paletteIndex) => {\n            // indices\n            const baseIndex = positions.length / 3;\n            indices.push(baseIndex, baseIndex + 1, baseIndex + 2, baseIndex, baseIndex + 2, baseIndex + 3);\n\n            // positions\n            vset(tmp, pos);\n            positions.push(tmp[0], tmp[1], tmp[2]);\n            vadd(tmp, axis1);\n            positions.push(tmp[0], tmp[1], tmp[2]);\n            vadd(tmp, axis2);\n            positions.push(tmp[0], tmp[1], tmp[2]);\n            vsub(tmp, axis1);\n            positions.push(tmp[0], tmp[1], tmp[2]);\n\n            // normals\n            normals.push(normal[0], normal[1], normal[2]);\n            normals.push(normal[0], normal[1], normal[2]);\n            normals.push(normal[0], normal[1], normal[2]);\n            normals.push(normal[0], normal[1], normal[2]);\n\n            // colors\n            const clr = voxMesh.palette.clr(paletteIndex);\n            colors.push(clr[0], clr[1], clr[2], clr[3]);\n            colors.push(clr[0], clr[1], clr[2], clr[3]);\n            colors.push(clr[0], clr[1], clr[2], clr[3]);\n            colors.push(clr[0], clr[1], clr[2], clr[3]);\n        };\n\n        const posX = [1, 0, 0];\n        const posY = [0, 1, 0];\n        const posZ = [0, 0, 1];\n        const negX = [-1, 0, 0];\n        const negY = [0, -1, 0];\n        const negZ = [0, 0, -1];\n\n        // generate voxel mesh from flattened voxel data\n        for (let z = 0; z <= flattened.extent[2]; ++z) {\n            pos[2] = z;\n            for (let y = 0; y <= flattened.extent[1]; ++y) {\n                pos[1] = y;\n                for (let x = 0; x <= flattened.extent[0]; ++x) {\n                    pos[0] = x;\n\n                    const v = flattened.at(x, y, z);\n                    const px = flattened.at(x - 1, y, z);\n                    const py = flattened.at(x, y - 1, z);\n                    const pz = flattened.at(x, y, z - 1);\n\n                    if (v !== 0) {\n                        if (px === 0) {\n                            quad(posZ, posY, negX, v);\n                        }\n                        if (py === 0) {\n                            quad(posX, posZ, negY, v);\n                        }\n                        if (pz === 0) {\n                            quad(posY, posX, negZ, v);\n                        }\n                    } else {\n                        if (px !== 0) {\n                            quad(posY, posZ, posX, px);\n                        }\n                        if (py !== 0) {\n                            quad(posZ, posX, posY, py);\n                        }\n                        if (pz !== 0) {\n                            quad(posX, posY, posZ, pz);\n                        }\n                    }\n                }\n            }\n        }\n\n        // construct the mesh\n        const mesh = new pc.Mesh(device);\n        mesh.setPositions(positions);\n        mesh.setNormals(normals);\n        mesh.setColors32(colors);\n        mesh.setIndices(indices);\n        mesh.update();\n\n        return mesh;\n    }\n}\n\n// container resource\n\nclass VoxContainerResource {\n    constructor(device, voxModel) {\n        this.device = device;\n        this.voxModel = voxModel;\n    }\n\n    instantiateModelEntity(options) {\n        return null;\n    }\n\n    instantiateRenderEntity(options) {\n        const material = new pc.StandardMaterial();\n        material.diffuseVertexColor = true;\n\n        // generate animation frames\n        const meshInstances = this.voxModel.frames.map((f, i) => {\n            const mesh = VoxGen.mesh(this.device, this.voxModel, i);\n            return new pc.MeshInstance(mesh, material);\n        });\n\n        const entity = new pc.Entity();\n        entity.addComponent('render', {\n            material: material,\n            meshInstances: meshInstances\n        });\n\n        entity.addComponent('voxanim', { });\n\n        this.renders = [];\n\n        return entity;\n    }\n}\n\n// component / system support\n\nconst VoxAnimComponentSchema =  ['enabled'];\n\nclass VoxAnimComponentData {\n    constructor() {\n        this.enabled = true;\n    }\n}\n\nclass VoxAnimComponent extends Component {\n    constructor(system, entity) {\n        super(system, entity);\n\n        this.playing = true;\n        this.timer = 0;\n        this.fps = 10;\n    }\n\n    update(dt) {\n        if (this.playing) {\n            this.timer += dt;\n        }\n\n        const meshInstances = this.entity.render?.meshInstances || this.entity.model?.meshInstances;\n        if (meshInstances) {\n            const frame = Math.floor(this.timer * this.fps) % meshInstances.length;\n            for (let i = 0; i < meshInstances.length; ++i) {\n                meshInstances[i].visible = (i === frame);\n            }\n        }\n    }\n}\n\nclass VoxAnimSystem extends ComponentSystem {\n    constructor(app) {\n        super(app);\n\n        this.id = 'voxanim';\n        this.ComponentType = VoxAnimComponent;\n        this.DataType = VoxAnimComponentData;\n\n        this.schema = VoxAnimComponentSchema;\n\n        this.app.systems.on('update', this.onUpdate, this);\n    }\n\n    initializeComponentData(component, data, properties) {\n        properties = [\n            'playing',\n            'timer',\n            'fps'\n        ];\n\n        for (let i = 0; i < properties.length; i++) {\n            if (data.hasOwnProperty(properties[i])) {\n                component[properties[i]] = data[properties[i]];\n            }\n        }\n\n        super.initializeComponentData(component, data, VoxAnimComponentSchema);\n    }\n\n    cloneComponent(entity, clone) {\n        const srcComponent = entity.voxanim;\n        const cloneData = {\n            playing: srcComponent.playing,\n            timer: srcComponent.timer,\n            fps: srcComponent.fps\n        };\n\n        return this.addComponent(clone, cloneData);\n    }\n\n    onUpdate(dt) {\n        const components = this.store;\n        for (const id in components) {\n            if (components.hasOwnProperty(id)) {\n                const entity = components[id].entity;\n                if (entity.enabled) {\n                    const component = entity.voxanim;\n                    if (component.enabled) {\n                        component.update(dt);\n                    }\n                }\n            }\n        }\n    }\n\n    destroy() {\n        super.destroy();\n        this.app.systems.off('update', this.onUpdate, this);\n    }\n}\n\nComponent._buildAccessors(VoxAnimComponent.prototype, VoxAnimComponentSchema);\n\n// parser\n\nclass VoxParser {\n    constructor(device, assets, maxRetries) {\n        this._device = device;\n        this._assets = assets;\n        this._maxRetries = maxRetries;\n    }\n\n    load(url, callback, asset) {\n        pc.Asset.fetchArrayBuffer(url.load, (err, result) => {\n            if (err) {\n                callback(err);\n            } else {\n                callback(null, new VoxContainerResource(this._device, VoxLoader.load(result)));\n            }\n        }, asset, this._maxRetries);\n    }\n\n    open(url, data, asset) {\n        return data;\n    }\n}\n\nconst registerVoxParser = (app) => {\n    // register the animation component system\n    app.systems.add(new VoxAnimSystem(app));\n\n    // register resource handler\n    app.loader.getHandler(\"container\").parsers.vox = new VoxParser(app.graphicsDevice, app.assets);\n};\n\nexport {\n    registerVoxParser\n};\n"],"names":["Tracing","enabled","add","get","_traceChannels","Set","stack","Debug","deprecated","_loggedMessages","console","message","assert","_len","args","_key","arguments","apply","_console","assertDestroyed","constructor","_object$constructor","has","call","func","log","_console2","logOnce","_len2","_key2","_console3","warn","_console4","warnOnce","_len3","_key3","_console5","error","_console6","errorOnce","_len4","_key4","_console7","trace","channel","_len5","_key5","_console8","concat","EventHandle","scope","once","_removed","_proto","off","name","on","callback","_createClass","set","value","EventHandler","Map","initEventHandler","_addCallback","callbackActive","_callbackActive","slice","push","evt","_callbacks","_step","key","callbacks","_createForOfIteratorHelperLoose","values","_step2","i","length","removed","clear","arg4","arg7","arg8","callbacksInitial","arg1","arg2","_once","existingCallback","ind","delete","hasEvent","_this$_callbacks$get","Component","_EventHandler","system","entity","_this","schema","_accessorsBuilt","oldValue","newValue","fire","onSetEnabled","_assertThisInitialized","forEach","Object","obj","data","configurable","buildAccessors","store","record","math","DEG_TO_RAD","Math","PI","RAD_TO_DEG","clamp","b","g","a","bytesToInt24","r","lerp","lerpAngle","x","val","pow","random","diff","smoothstep","min","max","smootherstep","roundUp","multiple","inclusive","num","Color","undefined","clone","copy","rhs","equals","alpha","fromString","replace","bytes","toString","s","round","_class","BLACK","freeze","BLUE","CYAN","GRAY","GREEN","MAGENTA","RED","WHITE","YELLOW","Vec2","y","lhs","addScalar","cross","distance","sqrt","div","divScalar","dot","epsilon","abs","lengthSq","mul","mulScalar","normalize","src","invLength","rotate","len","angle","angleTo","atan2","floor","ceil","sub","subScalar","ZERO","ONE","UP","DOWN","RIGHT","LEFT","Vec3","z","cstr","lx","ly","lz","rx","ry","rz","project","a_dot_b","b_dot_b","FORWARD","BACK","Vec4","w","ComponentSystem","component","DataType","componentData","id","c","removeComponent","getGuid","initializeComponentData","properties","type","descriptor","getPropertiesOfType","matchingProperties","destroy","convertValue","defaultPalette","Uint8Array","Uint32Array","buffer","VoxPalette","paletteData","tmp","prototype","clr","index","_x","_y","_z","VoxFrame","voxelData","_data","_bound","_flattened","numVoxels","extent","bound","flattenedData","at","VoxModel","frames","palette","_proto2","addFrame","frame","setPalette","VoxLoader","load","arrayBuffer","rs","pc","ReadStream","readChunkHeader","readChars","numBytes","readU32","numChildBytes","fileId","version","mainChunk","voxModel","offset","chunk","skip","vset","v0","v1","vadd","vsub","VoxGen","mesh","device","voxMesh","voxFrame","flattened","positions","normals","colors","indices","pos","quad","axis1","axis2","normal","paletteIndex","baseIndex","posX","posY","posZ","negX","negY","negZ","v","px","py","pz","Mesh","setPositions","setNormals","setColors32","setIndices","update","VoxContainerResource","_proto3","instantiateModelEntity","options","instantiateRenderEntity","material","StandardMaterial","diffuseVertexColor","meshInstances","map","f","MeshInstance","Entity","addComponent","renders","VoxAnimComponentSchema","VoxAnimComponentData","VoxAnimComponent","_Component","_inheritsLoose","_this2","playing","timer","fps","_proto4","dt","_this$entity$render","_this$entity$model","render","model","visible","VoxAnimSystem","_ComponentSystem","app","_this3","ComponentType","systems","onUpdate","_proto5","hasOwnProperty","cloneComponent","srcComponent","voxanim","cloneData","components","_buildAccessors","VoxParser","assets","maxRetries","_device","_assets","_maxRetries","_proto6","url","asset","_this4","Asset","fetchArrayBuffer","err","result","open","registerVoxParser","loader","getHandler","parsers","vox","graphicsDevice"],"mappings":"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"}